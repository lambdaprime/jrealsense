// Generated by jextract

package id.jrealsense.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$42 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$42() {}
    static final FunctionDescriptor __issignalingf$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle __issignalingf$MH = RuntimeHelper.downcallHandle(
        "__issignalingf",
        constants$42.__issignalingf$FUNC
    );
    static final FunctionDescriptor acosf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle acosf$MH = RuntimeHelper.downcallHandle(
        "acosf",
        constants$42.acosf$FUNC
    );
    static final FunctionDescriptor __acosf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle __acosf$MH = RuntimeHelper.downcallHandle(
        "__acosf",
        constants$42.__acosf$FUNC
    );
    static final FunctionDescriptor asinf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle asinf$MH = RuntimeHelper.downcallHandle(
        "asinf",
        constants$42.asinf$FUNC
    );
    static final FunctionDescriptor __asinf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle __asinf$MH = RuntimeHelper.downcallHandle(
        "__asinf",
        constants$42.__asinf$FUNC
    );
    static final FunctionDescriptor atanf$FUNC = FunctionDescriptor.of(Constants$root.C_FLOAT$LAYOUT,
        Constants$root.C_FLOAT$LAYOUT
    );
    static final MethodHandle atanf$MH = RuntimeHelper.downcallHandle(
        "atanf",
        constants$42.atanf$FUNC
    );
}


