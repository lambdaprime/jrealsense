// Generated by jextract

package id.jrealsense.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct rs2_intrinsics {
 *     int width;
 *     int height;
 *     float ppx;
 *     float ppy;
 *     float fx;
 *     float fy;
 *     rs2_distortion model;
 *     float coeffs[5];
 * };
 * }
 */
public class rs2_intrinsics {

    public static MemoryLayout $LAYOUT() {
        return constants$87.const$2;
    }
    public static VarHandle width$VH() {
        return constants$87.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)constants$87.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        constants$87.const$3.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)constants$87.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        constants$87.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$87.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$87.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$87.const$4.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$87.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$87.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ppx$VH() {
        return constants$87.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float ppx;
     * }
     */
    public static float ppx$get(MemorySegment seg) {
        return (float)constants$87.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float ppx;
     * }
     */
    public static void ppx$set(MemorySegment seg, float x) {
        constants$87.const$5.set(seg, x);
    }
    public static float ppx$get(MemorySegment seg, long index) {
        return (float)constants$87.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ppx$set(MemorySegment seg, long index, float x) {
        constants$87.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ppy$VH() {
        return constants$88.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float ppy;
     * }
     */
    public static float ppy$get(MemorySegment seg) {
        return (float)constants$88.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float ppy;
     * }
     */
    public static void ppy$set(MemorySegment seg, float x) {
        constants$88.const$0.set(seg, x);
    }
    public static float ppy$get(MemorySegment seg, long index) {
        return (float)constants$88.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void ppy$set(MemorySegment seg, long index, float x) {
        constants$88.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fx$VH() {
        return constants$88.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float fx;
     * }
     */
    public static float fx$get(MemorySegment seg) {
        return (float)constants$88.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float fx;
     * }
     */
    public static void fx$set(MemorySegment seg, float x) {
        constants$88.const$1.set(seg, x);
    }
    public static float fx$get(MemorySegment seg, long index) {
        return (float)constants$88.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void fx$set(MemorySegment seg, long index, float x) {
        constants$88.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fy$VH() {
        return constants$88.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float fy;
     * }
     */
    public static float fy$get(MemorySegment seg) {
        return (float)constants$88.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float fy;
     * }
     */
    public static void fy$set(MemorySegment seg, float x) {
        constants$88.const$2.set(seg, x);
    }
    public static float fy$get(MemorySegment seg, long index) {
        return (float)constants$88.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void fy$set(MemorySegment seg, long index, float x) {
        constants$88.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle model$VH() {
        return constants$88.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * rs2_distortion model;
     * }
     */
    public static int model$get(MemorySegment seg) {
        return (int)constants$88.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * rs2_distortion model;
     * }
     */
    public static void model$set(MemorySegment seg, int x) {
        constants$88.const$3.set(seg, x);
    }
    public static int model$get(MemorySegment seg, long index) {
        return (int)constants$88.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void model$set(MemorySegment seg, long index, int x) {
        constants$88.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment coeffs$slice(MemorySegment seg) {
        return seg.asSlice(28, 20);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


