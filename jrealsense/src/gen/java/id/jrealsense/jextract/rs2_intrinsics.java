// Generated by jextract

package id.jrealsense.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct rs2_intrinsics {
 *     int width;
 *     int height;
 *     float ppx;
 *     float ppy;
 *     float fx;
 *     float fy;
 *     rs2_distortion model;
 *     float coeffs[5];
 * };
 * }
 */
public class rs2_intrinsics {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("width"),
        Constants$root.C_INT$LAYOUT.withName("height"),
        Constants$root.C_FLOAT$LAYOUT.withName("ppx"),
        Constants$root.C_FLOAT$LAYOUT.withName("ppy"),
        Constants$root.C_FLOAT$LAYOUT.withName("fx"),
        Constants$root.C_FLOAT$LAYOUT.withName("fy"),
        Constants$root.C_INT$LAYOUT.withName("model"),
        MemoryLayout.sequenceLayout(5, Constants$root.C_FLOAT$LAYOUT).withName("coeffs")
    ).withName("rs2_intrinsics");
    public static MemoryLayout $LAYOUT() {
        return rs2_intrinsics.$struct$LAYOUT;
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return rs2_intrinsics.width$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static int width$get(MemorySegment seg) {
        return (int)rs2_intrinsics.width$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int width;
     * }
     */
    public static void width$set(MemorySegment seg, int x) {
        rs2_intrinsics.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)rs2_intrinsics.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        rs2_intrinsics.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return rs2_intrinsics.height$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)rs2_intrinsics.height$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        rs2_intrinsics.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)rs2_intrinsics.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        rs2_intrinsics.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ppx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ppx"));
    public static VarHandle ppx$VH() {
        return rs2_intrinsics.ppx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float ppx;
     * }
     */
    public static float ppx$get(MemorySegment seg) {
        return (float)rs2_intrinsics.ppx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float ppx;
     * }
     */
    public static void ppx$set(MemorySegment seg, float x) {
        rs2_intrinsics.ppx$VH.set(seg, x);
    }
    public static float ppx$get(MemorySegment seg, long index) {
        return (float)rs2_intrinsics.ppx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ppx$set(MemorySegment seg, long index, float x) {
        rs2_intrinsics.ppx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ppy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ppy"));
    public static VarHandle ppy$VH() {
        return rs2_intrinsics.ppy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float ppy;
     * }
     */
    public static float ppy$get(MemorySegment seg) {
        return (float)rs2_intrinsics.ppy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float ppy;
     * }
     */
    public static void ppy$set(MemorySegment seg, float x) {
        rs2_intrinsics.ppy$VH.set(seg, x);
    }
    public static float ppy$get(MemorySegment seg, long index) {
        return (float)rs2_intrinsics.ppy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ppy$set(MemorySegment seg, long index, float x) {
        rs2_intrinsics.ppy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fx"));
    public static VarHandle fx$VH() {
        return rs2_intrinsics.fx$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float fx;
     * }
     */
    public static float fx$get(MemorySegment seg) {
        return (float)rs2_intrinsics.fx$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float fx;
     * }
     */
    public static void fx$set(MemorySegment seg, float x) {
        rs2_intrinsics.fx$VH.set(seg, x);
    }
    public static float fx$get(MemorySegment seg, long index) {
        return (float)rs2_intrinsics.fx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fx$set(MemorySegment seg, long index, float x) {
        rs2_intrinsics.fx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fy"));
    public static VarHandle fy$VH() {
        return rs2_intrinsics.fy$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float fy;
     * }
     */
    public static float fy$get(MemorySegment seg) {
        return (float)rs2_intrinsics.fy$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float fy;
     * }
     */
    public static void fy$set(MemorySegment seg, float x) {
        rs2_intrinsics.fy$VH.set(seg, x);
    }
    public static float fy$get(MemorySegment seg, long index) {
        return (float)rs2_intrinsics.fy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fy$set(MemorySegment seg, long index, float x) {
        rs2_intrinsics.fy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle model$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("model"));
    public static VarHandle model$VH() {
        return rs2_intrinsics.model$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * rs2_distortion model;
     * }
     */
    public static int model$get(MemorySegment seg) {
        return (int)rs2_intrinsics.model$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * rs2_distortion model;
     * }
     */
    public static void model$set(MemorySegment seg, int x) {
        rs2_intrinsics.model$VH.set(seg, x);
    }
    public static int model$get(MemorySegment seg, long index) {
        return (int)rs2_intrinsics.model$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void model$set(MemorySegment seg, long index, int x) {
        rs2_intrinsics.model$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment coeffs$slice(MemorySegment seg) {
        return seg.asSlice(28, 20);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


