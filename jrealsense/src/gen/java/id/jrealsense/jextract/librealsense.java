// Generated by jextract

package id.jrealsense.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class librealsense extends librealsense_1 {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 31
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __LONG_DOUBLE_USES_FLOAT128 0
     * }
     */
    public static int __LONG_DOUBLE_USES_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDLIB_H 1
     * }
     */
    public static int _STDLIB_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WNOHANG 1
     * }
     */
    public static int WNOHANG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WUNTRACED 2
     * }
     */
    public static int WUNTRACED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WSTOPPED 2
     * }
     */
    public static int WSTOPPED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WEXITED 4
     * }
     */
    public static int WEXITED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define WCONTINUED 8
     * }
     */
    public static int WCONTINUED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define WNOWAIT 16777216
     * }
     */
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * #define __WNOTHREAD 536870912
     * }
     */
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * #define __WALL 1073741824
     * }
     */
    public static int __WALL() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define __ENUM_IDTYPE_T 1
     * }
     */
    public static int __ENUM_IDTYPE_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __W_CONTINUED 65535
     * }
     */
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define __WCOREFLAG 128
     * }
     */
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __ldiv_t_defined 1
     * }
     */
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __lldiv_t_defined 1
     * }
     */
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RAND_MAX 2147483647
     * }
     */
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define EXIT_FAILURE 1
     * }
     */
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXIT_SUCCESS 0
     * }
     */
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ALLOCA_H 1
     * }
     */
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __bool_true_false_are_defined 1
     * }
     */
    public static int __bool_true_false_are_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _MATH_H 1
     * }
     */
    public static int _MATH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_LIBM_SIMD_DECL_STUBS_H 1
     * }
     */
    public static int _BITS_LIBM_SIMD_DECL_STUBS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FP_LOGB0_IS_MIN 1
     * }
     */
    public static int __FP_LOGB0_IS_MIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FP_LOGBNAN_IS_MIN 1
     * }
     */
    public static int __FP_LOGBNAN_IS_MIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __MATH_DECLARING_DOUBLE 1
     * }
     */
    public static int __MATH_DECLARING_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __MATH_DECLARING_FLOATN 0
     * }
     */
    public static int __MATH_DECLARING_FLOATN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __MATH_DECLARE_LDOUBLE 1
     * }
     */
    public static int __MATH_DECLARE_LDOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FP_NAN 0
     * }
     */
    public static int FP_NAN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FP_INFINITE 1
     * }
     */
    public static int FP_INFINITE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FP_ZERO 2
     * }
     */
    public static int FP_ZERO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FP_SUBNORMAL 3
     * }
     */
    public static int FP_SUBNORMAL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FP_NORMAL 4
     * }
     */
    public static int FP_NORMAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define MATH_ERRNO 1
     * }
     */
    public static int MATH_ERRNO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MATH_ERREXCEPT 2
     * }
     */
    public static int MATH_ERREXCEPT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RS2_PRODUCT_LINE_ANY 255
     * }
     */
    public static int RS2_PRODUCT_LINE_ANY() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define RS2_PRODUCT_LINE_ANY_INTEL 254
     * }
     */
    public static int RS2_PRODUCT_LINE_ANY_INTEL() {
        return (int)254L;
    }
    /**
     * {@snippet :
     * #define RS2_PRODUCT_LINE_NON_INTEL 1
     * }
     */
    public static int RS2_PRODUCT_LINE_NON_INTEL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RS2_PRODUCT_LINE_D400 2
     * }
     */
    public static int RS2_PRODUCT_LINE_D400() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RS2_PRODUCT_LINE_SR300 4
     * }
     */
    public static int RS2_PRODUCT_LINE_SR300() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RS2_PRODUCT_LINE_L500 8
     * }
     */
    public static int RS2_PRODUCT_LINE_L500() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define RS2_PRODUCT_LINE_T200 16
     * }
     */
    public static int RS2_PRODUCT_LINE_T200() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define RS2_UNSIGNED_UPDATE_MODE_UPDATE 0
     * }
     */
    public static int RS2_UNSIGNED_UPDATE_MODE_UPDATE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RS2_UNSIGNED_UPDATE_MODE_READ_ONLY 1
     * }
     */
    public static int RS2_UNSIGNED_UPDATE_MODE_READ_ONLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RS2_UNSIGNED_UPDATE_MODE_FULL 2
     * }
     */
    public static int RS2_UNSIGNED_UPDATE_MODE_FULL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RS2_API_MAJOR_VERSION 2
     * }
     */
    public static int RS2_API_MAJOR_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RS2_API_MINOR_VERSION 53
     * }
     */
    public static int RS2_API_MINOR_VERSION() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * #define RS2_API_PATCH_VERSION 1
     * }
     */
    public static int RS2_API_PATCH_VERSION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RS2_API_BUILD_VERSION 0
     * }
     */
    public static int RS2_API_BUILD_VERSION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RS2_DEFAULT_TIMEOUT 15000
     * }
     */
    public static int RS2_DEFAULT_TIMEOUT() {
        return (int)15000L;
    }
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * enum .P_ALL = 0;
     * }
     */
    public static int P_ALL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .P_PID = 1;
     * }
     */
    public static int P_PID() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .P_PGID = 2;
     * }
     */
    public static int P_PGID() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    /**
     * {@snippet :
     * size_t __ctype_get_mb_cur_max();
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atof$MH,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* __nptr);
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atoi$MH,"atoi");
    }
    /**
     * {@snippet :
     * int atoi(char* __nptr);
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atol$MH,"atol");
    }
    /**
     * {@snippet :
     * long atol(char* __nptr);
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$0.atoll$MH,"atoll");
    }
    /**
     * {@snippet :
     * long long atoll(char* __nptr);
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$0.strtod$MH,"strtod");
    }
    /**
     * {@snippet :
     * double strtod(char* __nptr, char** __endptr);
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtof$MH,"strtof");
    }
    /**
     * {@snippet :
     * float strtof(char* __nptr, char** __endptr);
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtol$MH,"strtol");
    }
    /**
     * {@snippet :
     * long strtol(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoul$MH,"strtoul");
    }
    /**
     * {@snippet :
     * unsigned long strtoul(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoq$MH,"strtoq");
    }
    /**
     * {@snippet :
     * long long strtoq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtouq$MH,"strtouq");
    }
    /**
     * {@snippet :
     * unsigned long long strtouq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$1.strtoll$MH,"strtoll");
    }
    /**
     * {@snippet :
     * long long strtoll(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$2.strtoull$MH,"strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long strtoull(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$2.l64a$MH,"l64a");
    }
    /**
     * {@snippet :
     * char* l64a(long __n);
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$2.a64l$MH,"a64l");
    }
    /**
     * {@snippet :
     * long a64l(char* __s);
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$2.select$MH,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$2.pselect$MH,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timespec* __timeout, const __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$2.random$MH,"random");
    }
    /**
     * {@snippet :
     * long random();
     * }
     */
    public static long random() {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$3.srandom$MH,"srandom");
    }
    /**
     * {@snippet :
     * void srandom(unsigned int __seed);
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$3.initstate$MH,"initstate");
    }
    /**
     * {@snippet :
     * char* initstate(unsigned int __seed, char* __statebuf, size_t __statelen);
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$3.setstate$MH,"setstate");
    }
    /**
     * {@snippet :
     * char* setstate(char* __statebuf);
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$3.random_r$MH,"random_r");
    }
    /**
     * {@snippet :
     * int random_r(struct random_data* __buf, int32_t* __result);
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$3.srandom_r$MH,"srandom_r");
    }
    /**
     * {@snippet :
     * int srandom_r(unsigned int __seed, struct random_data* __buf);
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$3.initstate_r$MH,"initstate_r");
    }
    /**
     * {@snippet :
     * int initstate_r(unsigned int __seed, char* __statebuf, size_t __statelen, struct random_data* __buf);
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setstate_r$MH,"setstate_r");
    }
    /**
     * {@snippet :
     * int setstate_r(char* __statebuf, struct random_data* __buf);
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$4.rand$MH,"rand");
    }
    /**
     * {@snippet :
     * int rand();
     * }
     */
    public static int rand() {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$4.srand$MH,"srand");
    }
    /**
     * {@snippet :
     * void srand(unsigned int __seed);
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$4.rand_r$MH,"rand_r");
    }
    /**
     * {@snippet :
     * int rand_r(unsigned int* __seed);
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$4.drand48$MH,"drand48");
    }
    /**
     * {@snippet :
     * double drand48();
     * }
     */
    public static double drand48() {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$4.erand48$MH,"erand48");
    }
    /**
     * {@snippet :
     * double erand48(unsigned short __xsubi[3]);
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.lrand48$MH,"lrand48");
    }
    /**
     * {@snippet :
     * long lrand48();
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.nrand48$MH,"nrand48");
    }
    /**
     * {@snippet :
     * long nrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.mrand48$MH,"mrand48");
    }
    /**
     * {@snippet :
     * long mrand48();
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.jrand48$MH,"jrand48");
    }
    /**
     * {@snippet :
     * long jrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.srand48$MH,"srand48");
    }
    /**
     * {@snippet :
     * void srand48(long __seedval);
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$5.seed48$MH,"seed48");
    }
    /**
     * {@snippet :
     * unsigned short* seed48(unsigned short __seed16v[3]);
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lcong48$MH,"lcong48");
    }
    /**
     * {@snippet :
     * void lcong48(unsigned short __param[7]);
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.drand48_r$MH,"drand48_r");
    }
    /**
     * {@snippet :
     * int drand48_r(struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.erand48_r$MH,"erand48_r");
    }
    /**
     * {@snippet :
     * int erand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.lrand48_r$MH,"lrand48_r");
    }
    /**
     * {@snippet :
     * int lrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.nrand48_r$MH,"nrand48_r");
    }
    /**
     * {@snippet :
     * int nrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$6.mrand48_r$MH,"mrand48_r");
    }
    /**
     * {@snippet :
     * int mrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.jrand48_r$MH,"jrand48_r");
    }
    /**
     * {@snippet :
     * int jrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int jrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.srand48_r$MH,"srand48_r");
    }
    /**
     * {@snippet :
     * int srand48_r(long __seedval, struct drand48_data* __buffer);
     * }
     */
    public static int srand48_r(long __seedval, MemorySegment __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.seed48_r$MH,"seed48_r");
    }
    /**
     * {@snippet :
     * int seed48_r(unsigned short __seed16v[3], struct drand48_data* __buffer);
     * }
     */
    public static int seed48_r(MemorySegment __seed16v, MemorySegment __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$7.lcong48_r$MH,"lcong48_r");
    }
    /**
     * {@snippet :
     * int lcong48_r(unsigned short __param[7], struct drand48_data* __buffer);
     * }
     */
    public static int lcong48_r(MemorySegment __param, MemorySegment __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.malloc$MH,"malloc");
    }
    /**
     * {@snippet :
     * void* malloc(size_t __size);
     * }
     */
    public static MemorySegment malloc(long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.calloc$MH,"calloc");
    }
    /**
     * {@snippet :
     * void* calloc(size_t __nmemb, size_t __size);
     * }
     */
    public static MemorySegment calloc(long __nmemb, long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.realloc$MH,"realloc");
    }
    /**
     * {@snippet :
     * void* realloc(void* __ptr, size_t __size);
     * }
     */
    public static MemorySegment realloc(MemorySegment __ptr, long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$8.reallocarray$MH,"reallocarray");
    }
    /**
     * {@snippet :
     * void* reallocarray(void* __ptr, size_t __nmemb, size_t __size);
     * }
     */
    public static MemorySegment reallocarray(MemorySegment __ptr, long __nmemb, long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$8.free$MH,"free");
    }
    /**
     * {@snippet :
     * void free(void* __ptr);
     * }
     */
    public static void free(MemorySegment __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$8.alloca$MH,"alloca");
    }
    /**
     * {@snippet :
     * void* alloca(size_t __size);
     * }
     */
    public static MemorySegment alloca(long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.valloc$MH,"valloc");
    }
    /**
     * {@snippet :
     * void* valloc(size_t __size);
     * }
     */
    public static MemorySegment valloc(long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$8.posix_memalign$MH,"posix_memalign");
    }
    /**
     * {@snippet :
     * int posix_memalign(void** __memptr, size_t __alignment, size_t __size);
     * }
     */
    public static int posix_memalign(MemorySegment __memptr, long __alignment, long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$9.aligned_alloc$MH,"aligned_alloc");
    }
    /**
     * {@snippet :
     * void* aligned_alloc(size_t __alignment, size_t __size);
     * }
     */
    public static MemorySegment aligned_alloc(long __alignment, long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$9.abort$MH,"abort");
    }
    /**
     * {@snippet :
     * void abort();
     * }
     */
    public static void abort() {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$9.atexit$MH,"atexit");
    }
    /**
     * {@snippet :
     * int atexit(void (*__func)());
     * }
     */
    public static int atexit(MemorySegment __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.at_quick_exit$MH,"at_quick_exit");
    }
    /**
     * {@snippet :
     * int at_quick_exit(void (*__func)());
     * }
     */
    public static int at_quick_exit(MemorySegment __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.on_exit$MH,"on_exit");
    }
    /**
     * {@snippet :
     * int on_exit(void (*__func)(int,void*), void* __arg);
     * }
     */
    public static int on_exit(MemorySegment __func, MemorySegment __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$10.exit$MH,"exit");
    }
    /**
     * {@snippet :
     * void exit(int __status);
     * }
     */
    public static void exit(int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11.quick_exit$MH,"quick_exit");
    }
    /**
     * {@snippet :
     * void quick_exit(int __status);
     * }
     */
    public static void quick_exit(int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$11._Exit$MH,"_Exit");
    }
    /**
     * {@snippet :
     * void _Exit(int __status);
     * }
     */
    public static void _Exit(int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$11.getenv$MH,"getenv");
    }
    /**
     * {@snippet :
     * char* getenv(char* __name);
     * }
     */
    public static MemorySegment getenv(MemorySegment __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$11.putenv$MH,"putenv");
    }
    /**
     * {@snippet :
     * int putenv(char* __string);
     * }
     */
    public static int putenv(MemorySegment __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$11.setenv$MH,"setenv");
    }
    /**
     * {@snippet :
     * int setenv(char* __name, char* __value, int __replace);
     * }
     */
    public static int setenv(MemorySegment __name, MemorySegment __value, int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$11.unsetenv$MH,"unsetenv");
    }
    /**
     * {@snippet :
     * int unsetenv(char* __name);
     * }
     */
    public static int unsetenv(MemorySegment __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$12.clearenv$MH,"clearenv");
    }
    /**
     * {@snippet :
     * int clearenv();
     * }
     */
    public static int clearenv() {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mktemp$MH,"mktemp");
    }
    /**
     * {@snippet :
     * char* mktemp(char* __template);
     * }
     */
    public static MemorySegment mktemp(MemorySegment __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mkstemp$MH,"mkstemp");
    }
    /**
     * {@snippet :
     * int mkstemp(char* __template);
     * }
     */
    public static int mkstemp(MemorySegment __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mkstemps$MH,"mkstemps");
    }
    /**
     * {@snippet :
     * int mkstemps(char* __template, int __suffixlen);
     * }
     */
    public static int mkstemps(MemorySegment __template, int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$12.mkdtemp$MH,"mkdtemp");
    }
    /**
     * {@snippet :
     * char* mkdtemp(char* __template);
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$12.system$MH,"system");
    }
    /**
     * {@snippet :
     * int system(char* __command);
     * }
     */
    public static int system(MemorySegment __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$13.realpath$MH,"realpath");
    }
    /**
     * {@snippet :
     * char* realpath(char* __name, char* __resolved);
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$13.bsearch$MH,"bsearch");
    }
    /**
     * {@snippet :
     * void* bsearch(void* __key, void* __base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
     * }
     */
    public static MemorySegment bsearch(MemorySegment __key, MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$13.qsort$MH,"qsort");
    }
    /**
     * {@snippet :
     * void qsort(void* __base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
     * }
     */
    public static void qsort(MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$13.abs$MH,"abs");
    }
    /**
     * {@snippet :
     * int abs(int __x);
     * }
     */
    public static int abs(int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$14.labs$MH,"labs");
    }
    /**
     * {@snippet :
     * long labs(long __x);
     * }
     */
    public static long labs(long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$14.llabs$MH,"llabs");
    }
    /**
     * {@snippet :
     * long long llabs(long long __x);
     * }
     */
    public static long llabs(long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$14.div$MH,"div");
    }
    /**
     * {@snippet :
     * div_t div(int __numer, int __denom);
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ldiv$MH,"ldiv");
    }
    /**
     * {@snippet :
     * ldiv_t ldiv(long __numer, long __denom);
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$14.lldiv$MH,"lldiv");
    }
    /**
     * {@snippet :
     * lldiv_t lldiv(long long __numer, long long __denom);
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ecvt$MH,"ecvt");
    }
    /**
     * {@snippet :
     * char* ecvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment ecvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$15.fcvt$MH,"fcvt");
    }
    /**
     * {@snippet :
     * char* fcvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment fcvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$15.gcvt$MH,"gcvt");
    }
    /**
     * {@snippet :
     * char* gcvt(double __value, int __ndigit, char* __buf);
     * }
     */
    public static MemorySegment gcvt(double __value, int __ndigit, MemorySegment __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$15.ecvt_r$MH,"ecvt_r");
    }
    /**
     * {@snippet :
     * int ecvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, size_t __len);
     * }
     */
    public static int ecvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$15.fcvt_r$MH,"fcvt_r");
    }
    /**
     * {@snippet :
     * int fcvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, size_t __len);
     * }
     */
    public static int fcvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$15.mblen$MH,"mblen");
    }
    /**
     * {@snippet :
     * int mblen(char* __s, size_t __n);
     * }
     */
    public static int mblen(MemorySegment __s, long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$15.mbtowc$MH,"mbtowc");
    }
    /**
     * {@snippet :
     * int mbtowc(wchar_t* __pwc, char* __s, size_t __n);
     * }
     */
    public static int mbtowc(MemorySegment __pwc, MemorySegment __s, long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$16.wctomb$MH,"wctomb");
    }
    /**
     * {@snippet :
     * int wctomb(char* __s, wchar_t __wchar);
     * }
     */
    public static int wctomb(MemorySegment __s, int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$16.mbstowcs$MH,"mbstowcs");
    }
    /**
     * {@snippet :
     * size_t mbstowcs(wchar_t* __pwcs, char* __s, size_t __n);
     * }
     */
    public static long mbstowcs(MemorySegment __pwcs, MemorySegment __s, long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$16.wcstombs$MH,"wcstombs");
    }
    /**
     * {@snippet :
     * size_t wcstombs(char* __s, const wchar_t* __pwcs, size_t __n);
     * }
     */
    public static long wcstombs(MemorySegment __s, MemorySegment __pwcs, long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$16.rpmatch$MH,"rpmatch");
    }
    /**
     * {@snippet :
     * int rpmatch(char* __response);
     * }
     */
    public static int rpmatch(MemorySegment __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$16.getsubopt$MH,"getsubopt");
    }
    /**
     * {@snippet :
     * int getsubopt(char** __optionp, char** __tokens, char** __valuep);
     * }
     */
    public static int getsubopt(MemorySegment __optionp, MemorySegment __tokens, MemorySegment __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$16.getloadavg$MH,"getloadavg");
    }
    /**
     * {@snippet :
     * int getloadavg(double __loadavg[], int __nelem);
     * }
     */
    public static int getloadavg(MemorySegment __loadavg, int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast16_t;
     * }
     */
    public static final OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast32_t;
     * }
     */
    public static final OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast16_t;
     * }
     */
    public static final OfLong uint_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast32_t;
     * }
     */
    public static final OfLong uint_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef float float_t;
     * }
     */
    public static final OfFloat float_t = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef double double_t;
     * }
     */
    public static final OfDouble double_t = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __fpclassify$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__fpclassify$MH,"__fpclassify");
    }
    /**
     * {@snippet :
     * int __fpclassify(double __value);
     * }
     */
    public static int __fpclassify(double __value) {
        var mh$ = __fpclassify$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __signbit$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__signbit$MH,"__signbit");
    }
    /**
     * {@snippet :
     * int __signbit(double __value);
     * }
     */
    public static int __signbit(double __value) {
        var mh$ = __signbit$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__isinf$MH,"__isinf");
    }
    /**
     * {@snippet :
     * int __isinf(double __value);
     * }
     */
    public static int __isinf(double __value) {
        var mh$ = __isinf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __finite$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__finite$MH,"__finite");
    }
    /**
     * {@snippet :
     * int __finite(double __value);
     * }
     */
    public static int __finite(double __value) {
        var mh$ = __finite$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__isnan$MH,"__isnan");
    }
    /**
     * {@snippet :
     * int __isnan(double __value);
     * }
     */
    public static int __isnan(double __value) {
        var mh$ = __isnan$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iseqsig$MH() {
        return RuntimeHelper.requireNonNull(constants$17.__iseqsig$MH,"__iseqsig");
    }
    /**
     * {@snippet :
     * int __iseqsig(double __x, double __y);
     * }
     */
    public static int __iseqsig(double __x, double __y) {
        var mh$ = __iseqsig$MH();
        try {
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __issignaling$MH() {
        return RuntimeHelper.requireNonNull(constants$18.__issignaling$MH,"__issignaling");
    }
    /**
     * {@snippet :
     * int __issignaling(double __value);
     * }
     */
    public static int __issignaling(double __value) {
        var mh$ = __issignaling$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acos$MH() {
        return RuntimeHelper.requireNonNull(constants$18.acos$MH,"acos");
    }
    /**
     * {@snippet :
     * double acos(double __x);
     * }
     */
    public static double acos(double __x) {
        var mh$ = acos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acos$MH() {
        return RuntimeHelper.requireNonNull(constants$18.__acos$MH,"__acos");
    }
    /**
     * {@snippet :
     * double __acos(double __x);
     * }
     */
    public static double __acos(double __x) {
        var mh$ = __acos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asin$MH() {
        return RuntimeHelper.requireNonNull(constants$18.asin$MH,"asin");
    }
    /**
     * {@snippet :
     * double asin(double __x);
     * }
     */
    public static double asin(double __x) {
        var mh$ = asin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asin$MH() {
        return RuntimeHelper.requireNonNull(constants$18.__asin$MH,"__asin");
    }
    /**
     * {@snippet :
     * double __asin(double __x);
     * }
     */
    public static double __asin(double __x) {
        var mh$ = __asin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan$MH() {
        return RuntimeHelper.requireNonNull(constants$18.atan$MH,"atan");
    }
    /**
     * {@snippet :
     * double atan(double __x);
     * }
     */
    public static double atan(double __x) {
        var mh$ = atan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan$MH() {
        return RuntimeHelper.requireNonNull(constants$19.__atan$MH,"__atan");
    }
    /**
     * {@snippet :
     * double __atan(double __x);
     * }
     */
    public static double __atan(double __x) {
        var mh$ = __atan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$19.atan2$MH,"atan2");
    }
    /**
     * {@snippet :
     * double atan2(double __y, double __x);
     * }
     */
    public static double atan2(double __y, double __x) {
        var mh$ = atan2$MH();
        try {
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$19.__atan2$MH,"__atan2");
    }
    /**
     * {@snippet :
     * double __atan2(double __y, double __x);
     * }
     */
    public static double __atan2(double __y, double __x) {
        var mh$ = __atan2$MH();
        try {
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cos$MH() {
        return RuntimeHelper.requireNonNull(constants$19.cos$MH,"cos");
    }
    /**
     * {@snippet :
     * double cos(double __x);
     * }
     */
    public static double cos(double __x) {
        var mh$ = cos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cos$MH() {
        return RuntimeHelper.requireNonNull(constants$19.__cos$MH,"__cos");
    }
    /**
     * {@snippet :
     * double __cos(double __x);
     * }
     */
    public static double __cos(double __x) {
        var mh$ = __cos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sin$MH() {
        return RuntimeHelper.requireNonNull(constants$19.sin$MH,"sin");
    }
    /**
     * {@snippet :
     * double sin(double __x);
     * }
     */
    public static double sin(double __x) {
        var mh$ = sin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sin$MH() {
        return RuntimeHelper.requireNonNull(constants$20.__sin$MH,"__sin");
    }
    /**
     * {@snippet :
     * double __sin(double __x);
     * }
     */
    public static double __sin(double __x) {
        var mh$ = __sin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tan$MH() {
        return RuntimeHelper.requireNonNull(constants$20.tan$MH,"tan");
    }
    /**
     * {@snippet :
     * double tan(double __x);
     * }
     */
    public static double tan(double __x) {
        var mh$ = tan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tan$MH() {
        return RuntimeHelper.requireNonNull(constants$20.__tan$MH,"__tan");
    }
    /**
     * {@snippet :
     * double __tan(double __x);
     * }
     */
    public static double __tan(double __x) {
        var mh$ = __tan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$20.cosh$MH,"cosh");
    }
    /**
     * {@snippet :
     * double cosh(double __x);
     * }
     */
    public static double cosh(double __x) {
        var mh$ = cosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$20.__cosh$MH,"__cosh");
    }
    /**
     * {@snippet :
     * double __cosh(double __x);
     * }
     */
    public static double __cosh(double __x) {
        var mh$ = __cosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$20.sinh$MH,"sinh");
    }
    /**
     * {@snippet :
     * double sinh(double __x);
     * }
     */
    public static double sinh(double __x) {
        var mh$ = sinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$21.__sinh$MH,"__sinh");
    }
    /**
     * {@snippet :
     * double __sinh(double __x);
     * }
     */
    public static double __sinh(double __x) {
        var mh$ = __sinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$21.tanh$MH,"tanh");
    }
    /**
     * {@snippet :
     * double tanh(double __x);
     * }
     */
    public static double tanh(double __x) {
        var mh$ = tanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$21.__tanh$MH,"__tanh");
    }
    /**
     * {@snippet :
     * double __tanh(double __x);
     * }
     */
    public static double __tanh(double __x) {
        var mh$ = __tanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$21.acosh$MH,"acosh");
    }
    /**
     * {@snippet :
     * double acosh(double __x);
     * }
     */
    public static double acosh(double __x) {
        var mh$ = acosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$21.__acosh$MH,"__acosh");
    }
    /**
     * {@snippet :
     * double __acosh(double __x);
     * }
     */
    public static double __acosh(double __x) {
        var mh$ = __acosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$21.asinh$MH,"asinh");
    }
    /**
     * {@snippet :
     * double asinh(double __x);
     * }
     */
    public static double asinh(double __x) {
        var mh$ = asinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__asinh$MH,"__asinh");
    }
    /**
     * {@snippet :
     * double __asinh(double __x);
     * }
     */
    public static double __asinh(double __x) {
        var mh$ = __asinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$22.atanh$MH,"atanh");
    }
    /**
     * {@snippet :
     * double atanh(double __x);
     * }
     */
    public static double atanh(double __x) {
        var mh$ = atanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__atanh$MH,"__atanh");
    }
    /**
     * {@snippet :
     * double __atanh(double __x);
     * }
     */
    public static double __atanh(double __x) {
        var mh$ = __atanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp$MH() {
        return RuntimeHelper.requireNonNull(constants$22.exp$MH,"exp");
    }
    /**
     * {@snippet :
     * double exp(double __x);
     * }
     */
    public static double exp(double __x) {
        var mh$ = exp$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp$MH() {
        return RuntimeHelper.requireNonNull(constants$22.__exp$MH,"__exp");
    }
    /**
     * {@snippet :
     * double __exp(double __x);
     * }
     */
    public static double __exp(double __x) {
        var mh$ = __exp$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$22.frexp$MH,"frexp");
    }
    /**
     * {@snippet :
     * double frexp(double __x, int* __exponent);
     * }
     */
    public static double frexp(double __x, MemorySegment __exponent) {
        var mh$ = frexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$23.__frexp$MH,"__frexp");
    }
    /**
     * {@snippet :
     * double __frexp(double __x, int* __exponent);
     * }
     */
    public static double __frexp(double __x, MemorySegment __exponent) {
        var mh$ = __frexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$23.ldexp$MH,"ldexp");
    }
    /**
     * {@snippet :
     * double ldexp(double __x, int __exponent);
     * }
     */
    public static double ldexp(double __x, int __exponent) {
        var mh$ = ldexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$23.__ldexp$MH,"__ldexp");
    }
    /**
     * {@snippet :
     * double __ldexp(double __x, int __exponent);
     * }
     */
    public static double __ldexp(double __x, int __exponent) {
        var mh$ = __ldexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log$MH() {
        return RuntimeHelper.requireNonNull(constants$23.log$MH,"log");
    }
    /**
     * {@snippet :
     * double log(double __x);
     * }
     */
    public static double log(double __x) {
        var mh$ = log$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log$MH() {
        return RuntimeHelper.requireNonNull(constants$23.__log$MH,"__log");
    }
    /**
     * {@snippet :
     * double __log(double __x);
     * }
     */
    public static double __log(double __x) {
        var mh$ = __log$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10$MH() {
        return RuntimeHelper.requireNonNull(constants$23.log10$MH,"log10");
    }
    /**
     * {@snippet :
     * double log10(double __x);
     * }
     */
    public static double log10(double __x) {
        var mh$ = log10$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log10$MH() {
        return RuntimeHelper.requireNonNull(constants$24.__log10$MH,"__log10");
    }
    /**
     * {@snippet :
     * double __log10(double __x);
     * }
     */
    public static double __log10(double __x) {
        var mh$ = __log10$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.modf$MH,"modf");
    }
    /**
     * {@snippet :
     * double modf(double __x, double* __iptr);
     * }
     */
    public static double modf(double __x, MemorySegment __iptr) {
        var mh$ = modf$MH();
        try {
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __modf$MH() {
        return RuntimeHelper.requireNonNull(constants$24.__modf$MH,"__modf");
    }
    /**
     * {@snippet :
     * double __modf(double __x, double* __iptr);
     * }
     */
    public static double __modf(double __x, MemorySegment __iptr) {
        var mh$ = __modf$MH();
        try {
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$24.expm1$MH,"expm1");
    }
    /**
     * {@snippet :
     * double expm1(double __x);
     * }
     */
    public static double expm1(double __x) {
        var mh$ = expm1$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$24.__expm1$MH,"__expm1");
    }
    /**
     * {@snippet :
     * double __expm1(double __x);
     * }
     */
    public static double __expm1(double __x) {
        var mh$ = __expm1$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$24.log1p$MH,"log1p");
    }
    /**
     * {@snippet :
     * double log1p(double __x);
     * }
     */
    public static double log1p(double __x) {
        var mh$ = log1p$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__log1p$MH,"__log1p");
    }
    /**
     * {@snippet :
     * double __log1p(double __x);
     * }
     */
    public static double __log1p(double __x) {
        var mh$ = __log1p$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logb$MH() {
        return RuntimeHelper.requireNonNull(constants$25.logb$MH,"logb");
    }
    /**
     * {@snippet :
     * double logb(double __x);
     * }
     */
    public static double logb(double __x) {
        var mh$ = logb$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logb$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__logb$MH,"__logb");
    }
    /**
     * {@snippet :
     * double __logb(double __x);
     * }
     */
    public static double __logb(double __x) {
        var mh$ = __logb$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$25.exp2$MH,"exp2");
    }
    /**
     * {@snippet :
     * double exp2(double __x);
     * }
     */
    public static double exp2(double __x) {
        var mh$ = exp2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$25.__exp2$MH,"__exp2");
    }
    /**
     * {@snippet :
     * double __exp2(double __x);
     * }
     */
    public static double __exp2(double __x) {
        var mh$ = __exp2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2$MH() {
        return RuntimeHelper.requireNonNull(constants$25.log2$MH,"log2");
    }
    /**
     * {@snippet :
     * double log2(double __x);
     * }
     */
    public static double log2(double __x) {
        var mh$ = log2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log2$MH() {
        return RuntimeHelper.requireNonNull(constants$26.__log2$MH,"__log2");
    }
    /**
     * {@snippet :
     * double __log2(double __x);
     * }
     */
    public static double __log2(double __x) {
        var mh$ = __log2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pow$MH() {
        return RuntimeHelper.requireNonNull(constants$26.pow$MH,"pow");
    }
    /**
     * {@snippet :
     * double pow(double __x, double __y);
     * }
     */
    public static double pow(double __x, double __y) {
        var mh$ = pow$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pow$MH() {
        return RuntimeHelper.requireNonNull(constants$26.__pow$MH,"__pow");
    }
    /**
     * {@snippet :
     * double __pow(double __x, double __y);
     * }
     */
    public static double __pow(double __x, double __y) {
        var mh$ = __pow$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$26.sqrt$MH,"sqrt");
    }
    /**
     * {@snippet :
     * double sqrt(double __x);
     * }
     */
    public static double sqrt(double __x) {
        var mh$ = sqrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$26.__sqrt$MH,"__sqrt");
    }
    /**
     * {@snippet :
     * double __sqrt(double __x);
     * }
     */
    public static double __sqrt(double __x) {
        var mh$ = __sqrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$26.hypot$MH,"hypot");
    }
    /**
     * {@snippet :
     * double hypot(double __x, double __y);
     * }
     */
    public static double hypot(double __x, double __y) {
        var mh$ = hypot$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$27.__hypot$MH,"__hypot");
    }
    /**
     * {@snippet :
     * double __hypot(double __x, double __y);
     * }
     */
    public static double __hypot(double __x, double __y) {
        var mh$ = __hypot$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$27.cbrt$MH,"cbrt");
    }
    /**
     * {@snippet :
     * double cbrt(double __x);
     * }
     */
    public static double cbrt(double __x) {
        var mh$ = cbrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$27.__cbrt$MH,"__cbrt");
    }
    /**
     * {@snippet :
     * double __cbrt(double __x);
     * }
     */
    public static double __cbrt(double __x) {
        var mh$ = __cbrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$27.ceil$MH,"ceil");
    }
    /**
     * {@snippet :
     * double ceil(double __x);
     * }
     */
    public static double ceil(double __x) {
        var mh$ = ceil$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$27.__ceil$MH,"__ceil");
    }
    /**
     * {@snippet :
     * double __ceil(double __x);
     * }
     */
    public static double __ceil(double __x) {
        var mh$ = __ceil$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$27.fabs$MH,"fabs");
    }
    /**
     * {@snippet :
     * double fabs(double __x);
     * }
     */
    public static double fabs(double __x) {
        var mh$ = fabs$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$28.__fabs$MH,"__fabs");
    }
    /**
     * {@snippet :
     * double __fabs(double __x);
     * }
     */
    public static double __fabs(double __x) {
        var mh$ = __fabs$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floor$MH() {
        return RuntimeHelper.requireNonNull(constants$28.floor$MH,"floor");
    }
    /**
     * {@snippet :
     * double floor(double __x);
     * }
     */
    public static double floor(double __x) {
        var mh$ = floor$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __floor$MH() {
        return RuntimeHelper.requireNonNull(constants$28.__floor$MH,"__floor");
    }
    /**
     * {@snippet :
     * double __floor(double __x);
     * }
     */
    public static double __floor(double __x) {
        var mh$ = __floor$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$28.fmod$MH,"fmod");
    }
    /**
     * {@snippet :
     * double fmod(double __x, double __y);
     * }
     */
    public static double fmod(double __x, double __y) {
        var mh$ = fmod$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$28.__fmod$MH,"__fmod");
    }
    /**
     * {@snippet :
     * double __fmod(double __x, double __y);
     * }
     */
    public static double __fmod(double __x, double __y) {
        var mh$ = __fmod$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$28.isinf$MH,"isinf");
    }
    /**
     * {@snippet :
     * int isinf(double __value);
     * }
     */
    public static int isinf(double __value) {
        var mh$ = isinf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle finite$MH() {
        return RuntimeHelper.requireNonNull(constants$29.finite$MH,"finite");
    }
    /**
     * {@snippet :
     * int finite(double __value);
     * }
     */
    public static int finite(double __value) {
        var mh$ = finite$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drem$MH() {
        return RuntimeHelper.requireNonNull(constants$29.drem$MH,"drem");
    }
    /**
     * {@snippet :
     * double drem(double __x, double __y);
     * }
     */
    public static double drem(double __x, double __y) {
        var mh$ = drem$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __drem$MH() {
        return RuntimeHelper.requireNonNull(constants$29.__drem$MH,"__drem");
    }
    /**
     * {@snippet :
     * double __drem(double __x, double __y);
     * }
     */
    public static double __drem(double __x, double __y) {
        var mh$ = __drem$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle significand$MH() {
        return RuntimeHelper.requireNonNull(constants$29.significand$MH,"significand");
    }
    /**
     * {@snippet :
     * double significand(double __x);
     * }
     */
    public static double significand(double __x) {
        var mh$ = significand$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __significand$MH() {
        return RuntimeHelper.requireNonNull(constants$29.__significand$MH,"__significand");
    }
    /**
     * {@snippet :
     * double __significand(double __x);
     * }
     */
    public static double __significand(double __x) {
        var mh$ = __significand$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$29.copysign$MH,"copysign");
    }
    /**
     * {@snippet :
     * double copysign(double __x, double __y);
     * }
     */
    public static double copysign(double __x, double __y) {
        var mh$ = copysign$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$30.__copysign$MH,"__copysign");
    }
    /**
     * {@snippet :
     * double __copysign(double __x, double __y);
     * }
     */
    public static double __copysign(double __x, double __y) {
        var mh$ = __copysign$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nan$MH() {
        return RuntimeHelper.requireNonNull(constants$30.nan$MH,"nan");
    }
    /**
     * {@snippet :
     * double nan(char* __tagb);
     * }
     */
    public static double nan(MemorySegment __tagb) {
        var mh$ = nan$MH();
        try {
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nan$MH() {
        return RuntimeHelper.requireNonNull(constants$30.__nan$MH,"__nan");
    }
    /**
     * {@snippet :
     * double __nan(char* __tagb);
     * }
     */
    public static double __nan(MemorySegment __tagb) {
        var mh$ = __nan$MH();
        try {
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$30.isnan$MH,"isnan");
    }
    /**
     * {@snippet :
     * int isnan(double __value);
     * }
     */
    public static int isnan(double __value) {
        var mh$ = isnan$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j0$MH() {
        return RuntimeHelper.requireNonNull(constants$30.j0$MH,"j0");
    }
    /**
     * {@snippet :
     * double j0(double);
     * }
     */
    public static double j0(double x0) {
        var mh$ = j0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j0$MH() {
        return RuntimeHelper.requireNonNull(constants$30.__j0$MH,"__j0");
    }
    /**
     * {@snippet :
     * double __j0(double);
     * }
     */
    public static double __j0(double x0) {
        var mh$ = __j0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1$MH() {
        return RuntimeHelper.requireNonNull(constants$31.j1$MH,"j1");
    }
    /**
     * {@snippet :
     * double j1(double);
     * }
     */
    public static double j1(double x0) {
        var mh$ = j1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j1$MH() {
        return RuntimeHelper.requireNonNull(constants$31.__j1$MH,"__j1");
    }
    /**
     * {@snippet :
     * double __j1(double);
     * }
     */
    public static double __j1(double x0) {
        var mh$ = __j1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jn$MH() {
        return RuntimeHelper.requireNonNull(constants$31.jn$MH,"jn");
    }
    /**
     * {@snippet :
     * double jn(int, double);
     * }
     */
    public static double jn(int x0, double x1) {
        var mh$ = jn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __jn$MH() {
        return RuntimeHelper.requireNonNull(constants$31.__jn$MH,"__jn");
    }
    /**
     * {@snippet :
     * double __jn(int, double);
     * }
     */
    public static double __jn(int x0, double x1) {
        var mh$ = __jn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0$MH() {
        return RuntimeHelper.requireNonNull(constants$31.y0$MH,"y0");
    }
    /**
     * {@snippet :
     * double y0(double);
     * }
     */
    public static double y0(double x0) {
        var mh$ = y0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y0$MH() {
        return RuntimeHelper.requireNonNull(constants$31.__y0$MH,"__y0");
    }
    /**
     * {@snippet :
     * double __y0(double);
     * }
     */
    public static double __y0(double x0) {
        var mh$ = __y0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1$MH() {
        return RuntimeHelper.requireNonNull(constants$32.y1$MH,"y1");
    }
    /**
     * {@snippet :
     * double y1(double);
     * }
     */
    public static double y1(double x0) {
        var mh$ = y1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y1$MH() {
        return RuntimeHelper.requireNonNull(constants$32.__y1$MH,"__y1");
    }
    /**
     * {@snippet :
     * double __y1(double);
     * }
     */
    public static double __y1(double x0) {
        var mh$ = __y1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yn$MH() {
        return RuntimeHelper.requireNonNull(constants$32.yn$MH,"yn");
    }
    /**
     * {@snippet :
     * double yn(int, double);
     * }
     */
    public static double yn(int x0, double x1) {
        var mh$ = yn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __yn$MH() {
        return RuntimeHelper.requireNonNull(constants$32.__yn$MH,"__yn");
    }
    /**
     * {@snippet :
     * double __yn(int, double);
     * }
     */
    public static double __yn(int x0, double x1) {
        var mh$ = __yn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.erf$MH,"erf");
    }
    /**
     * {@snippet :
     * double erf(double);
     * }
     */
    public static double erf(double x0) {
        var mh$ = erf$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erf$MH() {
        return RuntimeHelper.requireNonNull(constants$32.__erf$MH,"__erf");
    }
    /**
     * {@snippet :
     * double __erf(double);
     * }
     */
    public static double __erf(double x0) {
        var mh$ = __erf$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$33.erfc$MH,"erfc");
    }
    /**
     * {@snippet :
     * double erfc(double);
     * }
     */
    public static double erfc(double x0) {
        var mh$ = erfc$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$33.__erfc$MH,"__erfc");
    }
    /**
     * {@snippet :
     * double __erfc(double);
     * }
     */
    public static double __erfc(double x0) {
        var mh$ = __erfc$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$33.lgamma$MH,"lgamma");
    }
    /**
     * {@snippet :
     * double lgamma(double);
     * }
     */
    public static double lgamma(double x0) {
        var mh$ = lgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$33.__lgamma$MH,"__lgamma");
    }
    /**
     * {@snippet :
     * double __lgamma(double);
     * }
     */
    public static double __lgamma(double x0) {
        var mh$ = __lgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$33.tgamma$MH,"tgamma");
    }
    /**
     * {@snippet :
     * double tgamma(double);
     * }
     */
    public static double tgamma(double x0) {
        var mh$ = tgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$33.__tgamma$MH,"__tgamma");
    }
    /**
     * {@snippet :
     * double __tgamma(double);
     * }
     */
    public static double __tgamma(double x0) {
        var mh$ = __tgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$34.gamma$MH,"gamma");
    }
    /**
     * {@snippet :
     * double gamma(double);
     * }
     */
    public static double gamma(double x0) {
        var mh$ = gamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$34.__gamma$MH,"__gamma");
    }
    /**
     * {@snippet :
     * double __gamma(double);
     * }
     */
    public static double __gamma(double x0) {
        var mh$ = __gamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$34.lgamma_r$MH,"lgamma_r");
    }
    /**
     * {@snippet :
     * double lgamma_r(double, int* __signgamp);
     * }
     */
    public static double lgamma_r(double x0, MemorySegment __signgamp) {
        var mh$ = lgamma_r$MH();
        try {
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$34.__lgamma_r$MH,"__lgamma_r");
    }
    /**
     * {@snippet :
     * double __lgamma_r(double, int* __signgamp);
     * }
     */
    public static double __lgamma_r(double x0, MemorySegment __signgamp) {
        var mh$ = __lgamma_r$MH();
        try {
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rint$MH() {
        return RuntimeHelper.requireNonNull(constants$34.rint$MH,"rint");
    }
    /**
     * {@snippet :
     * double rint(double __x);
     * }
     */
    public static double rint(double __x) {
        var mh$ = rint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rint$MH() {
        return RuntimeHelper.requireNonNull(constants$34.__rint$MH,"__rint");
    }
    /**
     * {@snippet :
     * double __rint(double __x);
     * }
     */
    public static double __rint(double __x) {
        var mh$ = __rint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$35.nextafter$MH,"nextafter");
    }
    /**
     * {@snippet :
     * double nextafter(double __x, double __y);
     * }
     */
    public static double nextafter(double __x, double __y) {
        var mh$ = nextafter$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$35.__nextafter$MH,"__nextafter");
    }
    /**
     * {@snippet :
     * double __nextafter(double __x, double __y);
     * }
     */
    public static double __nextafter(double __x, double __y) {
        var mh$ = __nextafter$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$35.remainder$MH,"remainder");
    }
    /**
     * {@snippet :
     * double remainder(double __x, double __y);
     * }
     */
    public static double remainder(double __x, double __y) {
        var mh$ = remainder$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$35.__remainder$MH,"__remainder");
    }
    /**
     * {@snippet :
     * double __remainder(double __x, double __y);
     * }
     */
    public static double __remainder(double __x, double __y) {
        var mh$ = __remainder$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$35.scalbn$MH,"scalbn");
    }
    /**
     * {@snippet :
     * double scalbn(double __x, int __n);
     * }
     */
    public static double scalbn(double __x, int __n) {
        var mh$ = scalbn$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$35.__scalbn$MH,"__scalbn");
    }
    /**
     * {@snippet :
     * double __scalbn(double __x, int __n);
     * }
     */
    public static double __scalbn(double __x, int __n) {
        var mh$ = __scalbn$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$36.ilogb$MH,"ilogb");
    }
    /**
     * {@snippet :
     * int ilogb(double __x);
     * }
     */
    public static int ilogb(double __x) {
        var mh$ = ilogb$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__ilogb$MH,"__ilogb");
    }
    /**
     * {@snippet :
     * int __ilogb(double __x);
     * }
     */
    public static int __ilogb(double __x) {
        var mh$ = __ilogb$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$36.scalbln$MH,"scalbln");
    }
    /**
     * {@snippet :
     * double scalbln(double __x, long __n);
     * }
     */
    public static double scalbln(double __x, long __n) {
        var mh$ = scalbln$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__scalbln$MH,"__scalbln");
    }
    /**
     * {@snippet :
     * double __scalbln(double __x, long __n);
     * }
     */
    public static double __scalbln(double __x, long __n) {
        var mh$ = __scalbln$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$36.nearbyint$MH,"nearbyint");
    }
    /**
     * {@snippet :
     * double nearbyint(double __x);
     * }
     */
    public static double nearbyint(double __x) {
        var mh$ = nearbyint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$36.__nearbyint$MH,"__nearbyint");
    }
    /**
     * {@snippet :
     * double __nearbyint(double __x);
     * }
     */
    public static double __nearbyint(double __x) {
        var mh$ = __nearbyint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle round$MH() {
        return RuntimeHelper.requireNonNull(constants$37.round$MH,"round");
    }
    /**
     * {@snippet :
     * double round(double __x);
     * }
     */
    public static double round(double __x) {
        var mh$ = round$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __round$MH() {
        return RuntimeHelper.requireNonNull(constants$37.__round$MH,"__round");
    }
    /**
     * {@snippet :
     * double __round(double __x);
     * }
     */
    public static double __round(double __x) {
        var mh$ = __round$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$37.trunc$MH,"trunc");
    }
    /**
     * {@snippet :
     * double trunc(double __x);
     * }
     */
    public static double trunc(double __x) {
        var mh$ = trunc$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$37.__trunc$MH,"__trunc");
    }
    /**
     * {@snippet :
     * double __trunc(double __x);
     * }
     */
    public static double __trunc(double __x) {
        var mh$ = __trunc$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$37.remquo$MH,"remquo");
    }
    /**
     * {@snippet :
     * double remquo(double __x, double __y, int* __quo);
     * }
     */
    public static double remquo(double __x, double __y, MemorySegment __quo) {
        var mh$ = remquo$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$37.__remquo$MH,"__remquo");
    }
    /**
     * {@snippet :
     * double __remquo(double __x, double __y, int* __quo);
     * }
     */
    public static double __remquo(double __x, double __y, MemorySegment __quo) {
        var mh$ = __remquo$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$38.lrint$MH,"lrint");
    }
    /**
     * {@snippet :
     * long lrint(double __x);
     * }
     */
    public static long lrint(double __x) {
        var mh$ = lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$38.__lrint$MH,"__lrint");
    }
    /**
     * {@snippet :
     * long __lrint(double __x);
     * }
     */
    public static long __lrint(double __x) {
        var mh$ = __lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$38.llrint$MH,"llrint");
    }
    /**
     * {@snippet :
     * long long llrint(double __x);
     * }
     */
    public static long llrint(double __x) {
        var mh$ = llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$38.__llrint$MH,"__llrint");
    }
    /**
     * {@snippet :
     * long long __llrint(double __x);
     * }
     */
    public static long __llrint(double __x) {
        var mh$ = __llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lround$MH() {
        return RuntimeHelper.requireNonNull(constants$38.lround$MH,"lround");
    }
    /**
     * {@snippet :
     * long lround(double __x);
     * }
     */
    public static long lround(double __x) {
        var mh$ = lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lround$MH() {
        return RuntimeHelper.requireNonNull(constants$38.__lround$MH,"__lround");
    }
    /**
     * {@snippet :
     * long __lround(double __x);
     * }
     */
    public static long __lround(double __x) {
        var mh$ = __lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llround$MH() {
        return RuntimeHelper.requireNonNull(constants$39.llround$MH,"llround");
    }
    /**
     * {@snippet :
     * long long llround(double __x);
     * }
     */
    public static long llround(double __x) {
        var mh$ = llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llround$MH() {
        return RuntimeHelper.requireNonNull(constants$39.__llround$MH,"__llround");
    }
    /**
     * {@snippet :
     * long long __llround(double __x);
     * }
     */
    public static long __llround(double __x) {
        var mh$ = __llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$39.fdim$MH,"fdim");
    }
    /**
     * {@snippet :
     * double fdim(double __x, double __y);
     * }
     */
    public static double fdim(double __x, double __y) {
        var mh$ = fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$39.__fdim$MH,"__fdim");
    }
    /**
     * {@snippet :
     * double __fdim(double __x, double __y);
     * }
     */
    public static double __fdim(double __x, double __y) {
        var mh$ = __fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$39.fmax$MH,"fmax");
    }
    /**
     * {@snippet :
     * double fmax(double __x, double __y);
     * }
     */
    public static double fmax(double __x, double __y) {
        var mh$ = fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$39.__fmax$MH,"__fmax");
    }
    /**
     * {@snippet :
     * double __fmax(double __x, double __y);
     * }
     */
    public static double __fmax(double __x, double __y) {
        var mh$ = __fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$40.fmin$MH,"fmin");
    }
    /**
     * {@snippet :
     * double fmin(double __x, double __y);
     * }
     */
    public static double fmin(double __x, double __y) {
        var mh$ = fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$40.__fmin$MH,"__fmin");
    }
    /**
     * {@snippet :
     * double __fmin(double __x, double __y);
     * }
     */
    public static double __fmin(double __x, double __y) {
        var mh$ = __fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fma$MH() {
        return RuntimeHelper.requireNonNull(constants$40.fma$MH,"fma");
    }
    /**
     * {@snippet :
     * double fma(double __x, double __y, double __z);
     * }
     */
    public static double fma(double __x, double __y, double __z) {
        var mh$ = fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fma$MH() {
        return RuntimeHelper.requireNonNull(constants$40.__fma$MH,"__fma");
    }
    /**
     * {@snippet :
     * double __fma(double __x, double __y, double __z);
     * }
     */
    public static double __fma(double __x, double __y, double __z) {
        var mh$ = __fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$40.scalb$MH,"scalb");
    }
    /**
     * {@snippet :
     * double scalb(double __x, double __n);
     * }
     */
    public static double scalb(double __x, double __n) {
        var mh$ = scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$40.__scalb$MH,"__scalb");
    }
    /**
     * {@snippet :
     * double __scalb(double __x, double __n);
     * }
     */
    public static double __scalb(double __x, double __n) {
        var mh$ = __scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fpclassifyf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__fpclassifyf$MH,"__fpclassifyf");
    }
    /**
     * {@snippet :
     * int __fpclassifyf(float __value);
     * }
     */
    public static int __fpclassifyf(float __value) {
        var mh$ = __fpclassifyf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __signbitf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__signbitf$MH,"__signbitf");
    }
    /**
     * {@snippet :
     * int __signbitf(float __value);
     * }
     */
    public static int __signbitf(float __value) {
        var mh$ = __signbitf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__isinff$MH,"__isinff");
    }
    /**
     * {@snippet :
     * int __isinff(float __value);
     * }
     */
    public static int __isinff(float __value) {
        var mh$ = __isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__finitef$MH,"__finitef");
    }
    /**
     * {@snippet :
     * int __finitef(float __value);
     * }
     */
    public static int __finitef(float __value) {
        var mh$ = __finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__isnanf$MH,"__isnanf");
    }
    /**
     * {@snippet :
     * int __isnanf(float __value);
     * }
     */
    public static int __isnanf(float __value) {
        var mh$ = __isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iseqsigf$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__iseqsigf$MH,"__iseqsigf");
    }
    /**
     * {@snippet :
     * int __iseqsigf(float __x, float __y);
     * }
     */
    public static int __iseqsigf(float __x, float __y) {
        var mh$ = __iseqsigf$MH();
        try {
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __issignalingf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__issignalingf$MH,"__issignalingf");
    }
    /**
     * {@snippet :
     * int __issignalingf(float __value);
     * }
     */
    public static int __issignalingf(float __value) {
        var mh$ = __issignalingf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.acosf$MH,"acosf");
    }
    /**
     * {@snippet :
     * float acosf(float __x);
     * }
     */
    public static float acosf(float __x) {
        var mh$ = acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__acosf$MH,"__acosf");
    }
    /**
     * {@snippet :
     * float __acosf(float __x);
     * }
     */
    public static float __acosf(float __x) {
        var mh$ = __acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.asinf$MH,"asinf");
    }
    /**
     * {@snippet :
     * float asinf(float __x);
     * }
     */
    public static float asinf(float __x) {
        var mh$ = asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.__asinf$MH,"__asinf");
    }
    /**
     * {@snippet :
     * float __asinf(float __x);
     * }
     */
    public static float __asinf(float __x) {
        var mh$ = __asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$42.atanf$MH,"atanf");
    }
    /**
     * {@snippet :
     * float atanf(float __x);
     * }
     */
    public static float atanf(float __x) {
        var mh$ = atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__atanf$MH,"__atanf");
    }
    /**
     * {@snippet :
     * float __atanf(float __x);
     * }
     */
    public static float __atanf(float __x) {
        var mh$ = __atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$43.atan2f$MH,"atan2f");
    }
    /**
     * {@snippet :
     * float atan2f(float __y, float __x);
     * }
     */
    public static float atan2f(float __y, float __x) {
        var mh$ = atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__atan2f$MH,"__atan2f");
    }
    /**
     * {@snippet :
     * float __atan2f(float __y, float __x);
     * }
     */
    public static float __atan2f(float __y, float __x) {
        var mh$ = __atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.cosf$MH,"cosf");
    }
    /**
     * {@snippet :
     * float cosf(float __x);
     * }
     */
    public static float cosf(float __x) {
        var mh$ = cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.__cosf$MH,"__cosf");
    }
    /**
     * {@snippet :
     * float __cosf(float __x);
     * }
     */
    public static float __cosf(float __x) {
        var mh$ = __cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$43.sinf$MH,"sinf");
    }
    /**
     * {@snippet :
     * float sinf(float __x);
     * }
     */
    public static float sinf(float __x) {
        var mh$ = sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__sinf$MH,"__sinf");
    }
    /**
     * {@snippet :
     * float __sinf(float __x);
     * }
     */
    public static float __sinf(float __x) {
        var mh$ = __sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.tanf$MH,"tanf");
    }
    /**
     * {@snippet :
     * float tanf(float __x);
     * }
     */
    public static float tanf(float __x) {
        var mh$ = tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__tanf$MH,"__tanf");
    }
    /**
     * {@snippet :
     * float __tanf(float __x);
     * }
     */
    public static float __tanf(float __x) {
        var mh$ = __tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.coshf$MH,"coshf");
    }
    /**
     * {@snippet :
     * float coshf(float __x);
     * }
     */
    public static float coshf(float __x) {
        var mh$ = coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__coshf$MH,"__coshf");
    }
    /**
     * {@snippet :
     * float __coshf(float __x);
     * }
     */
    public static float __coshf(float __x) {
        var mh$ = __coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$44.sinhf$MH,"sinhf");
    }
    /**
     * {@snippet :
     * float sinhf(float __x);
     * }
     */
    public static float sinhf(float __x) {
        var mh$ = sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__sinhf$MH,"__sinhf");
    }
    /**
     * {@snippet :
     * float __sinhf(float __x);
     * }
     */
    public static float __sinhf(float __x) {
        var mh$ = __sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.tanhf$MH,"tanhf");
    }
    /**
     * {@snippet :
     * float tanhf(float __x);
     * }
     */
    public static float tanhf(float __x) {
        var mh$ = tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__tanhf$MH,"__tanhf");
    }
    /**
     * {@snippet :
     * float __tanhf(float __x);
     * }
     */
    public static float __tanhf(float __x) {
        var mh$ = __tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.acoshf$MH,"acoshf");
    }
    /**
     * {@snippet :
     * float acoshf(float __x);
     * }
     */
    public static float acoshf(float __x) {
        var mh$ = acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.__acoshf$MH,"__acoshf");
    }
    /**
     * {@snippet :
     * float __acoshf(float __x);
     * }
     */
    public static float __acoshf(float __x) {
        var mh$ = __acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$45.asinhf$MH,"asinhf");
    }
    /**
     * {@snippet :
     * float asinhf(float __x);
     * }
     */
    public static float asinhf(float __x) {
        var mh$ = asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.__asinhf$MH,"__asinhf");
    }
    /**
     * {@snippet :
     * float __asinhf(float __x);
     * }
     */
    public static float __asinhf(float __x) {
        var mh$ = __asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.atanhf$MH,"atanhf");
    }
    /**
     * {@snippet :
     * float atanhf(float __x);
     * }
     */
    public static float atanhf(float __x) {
        var mh$ = atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.__atanhf$MH,"__atanhf");
    }
    /**
     * {@snippet :
     * float __atanhf(float __x);
     * }
     */
    public static float __atanhf(float __x) {
        var mh$ = __atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.expf$MH,"expf");
    }
    /**
     * {@snippet :
     * float expf(float __x);
     * }
     */
    public static float expf(float __x) {
        var mh$ = expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.__expf$MH,"__expf");
    }
    /**
     * {@snippet :
     * float __expf(float __x);
     * }
     */
    public static float __expf(float __x) {
        var mh$ = __expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$46.frexpf$MH,"frexpf");
    }
    /**
     * {@snippet :
     * float frexpf(float __x, int* __exponent);
     * }
     */
    public static float frexpf(float __x, MemorySegment __exponent) {
        var mh$ = frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.__frexpf$MH,"__frexpf");
    }
    /**
     * {@snippet :
     * float __frexpf(float __x, int* __exponent);
     * }
     */
    public static float __frexpf(float __x, MemorySegment __exponent) {
        var mh$ = __frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.ldexpf$MH,"ldexpf");
    }
    /**
     * {@snippet :
     * float ldexpf(float __x, int __exponent);
     * }
     */
    public static float ldexpf(float __x, int __exponent) {
        var mh$ = ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.__ldexpf$MH,"__ldexpf");
    }
    /**
     * {@snippet :
     * float __ldexpf(float __x, int __exponent);
     * }
     */
    public static float __ldexpf(float __x, int __exponent) {
        var mh$ = __ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.logf$MH,"logf");
    }
    /**
     * {@snippet :
     * float logf(float __x);
     * }
     */
    public static float logf(float __x) {
        var mh$ = logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logf$MH() {
        return RuntimeHelper.requireNonNull(constants$47.__logf$MH,"__logf");
    }
    /**
     * {@snippet :
     * float __logf(float __x);
     * }
     */
    public static float __logf(float __x) {
        var mh$ = __logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$47.log10f$MH,"log10f");
    }
    /**
     * {@snippet :
     * float log10f(float __x);
     * }
     */
    public static float log10f(float __x) {
        var mh$ = log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__log10f$MH,"__log10f");
    }
    /**
     * {@snippet :
     * float __log10f(float __x);
     * }
     */
    public static float __log10f(float __x) {
        var mh$ = __log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modff$MH() {
        return RuntimeHelper.requireNonNull(constants$48.modff$MH,"modff");
    }
    /**
     * {@snippet :
     * float modff(float __x, float* __iptr);
     * }
     */
    public static float modff(float __x, MemorySegment __iptr) {
        var mh$ = modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __modff$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__modff$MH,"__modff");
    }
    /**
     * {@snippet :
     * float __modff(float __x, float* __iptr);
     * }
     */
    public static float __modff(float __x, MemorySegment __iptr) {
        var mh$ = __modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$48.expm1f$MH,"expm1f");
    }
    /**
     * {@snippet :
     * float expm1f(float __x);
     * }
     */
    public static float expm1f(float __x) {
        var mh$ = expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$48.__expm1f$MH,"__expm1f");
    }
    /**
     * {@snippet :
     * float __expm1f(float __x);
     * }
     */
    public static float __expm1f(float __x) {
        var mh$ = __expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$48.log1pf$MH,"log1pf");
    }
    /**
     * {@snippet :
     * float log1pf(float __x);
     * }
     */
    public static float log1pf(float __x) {
        var mh$ = log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$49.__log1pf$MH,"__log1pf");
    }
    /**
     * {@snippet :
     * float __log1pf(float __x);
     * }
     */
    public static float __log1pf(float __x) {
        var mh$ = __log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$49.logbf$MH,"logbf");
    }
    /**
     * {@snippet :
     * float logbf(float __x);
     * }
     */
    public static float logbf(float __x) {
        var mh$ = logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$49.__logbf$MH,"__logbf");
    }
    /**
     * {@snippet :
     * float __logbf(float __x);
     * }
     */
    public static float __logbf(float __x) {
        var mh$ = __logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$49.exp2f$MH,"exp2f");
    }
    /**
     * {@snippet :
     * float exp2f(float __x);
     * }
     */
    public static float exp2f(float __x) {
        var mh$ = exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$49.__exp2f$MH,"__exp2f");
    }
    /**
     * {@snippet :
     * float __exp2f(float __x);
     * }
     */
    public static float __exp2f(float __x) {
        var mh$ = __exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$49.log2f$MH,"log2f");
    }
    /**
     * {@snippet :
     * float log2f(float __x);
     * }
     */
    public static float log2f(float __x) {
        var mh$ = log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__log2f$MH,"__log2f");
    }
    /**
     * {@snippet :
     * float __log2f(float __x);
     * }
     */
    public static float __log2f(float __x) {
        var mh$ = __log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle powf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.powf$MH,"powf");
    }
    /**
     * {@snippet :
     * float powf(float __x, float __y);
     * }
     */
    public static float powf(float __x, float __y) {
        var mh$ = powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __powf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__powf$MH,"__powf");
    }
    /**
     * {@snippet :
     * float __powf(float __x, float __y);
     * }
     */
    public static float __powf(float __x, float __y) {
        var mh$ = __powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.sqrtf$MH,"sqrtf");
    }
    /**
     * {@snippet :
     * float sqrtf(float __x);
     * }
     */
    public static float sqrtf(float __x) {
        var mh$ = sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.__sqrtf$MH,"__sqrtf");
    }
    /**
     * {@snippet :
     * float __sqrtf(float __x);
     * }
     */
    public static float __sqrtf(float __x) {
        var mh$ = __sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$50.hypotf$MH,"hypotf");
    }
    /**
     * {@snippet :
     * float hypotf(float __x, float __y);
     * }
     */
    public static float hypotf(float __x, float __y) {
        var mh$ = hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__hypotf$MH,"__hypotf");
    }
    /**
     * {@snippet :
     * float __hypotf(float __x, float __y);
     * }
     */
    public static float __hypotf(float __x, float __y) {
        var mh$ = __hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.cbrtf$MH,"cbrtf");
    }
    /**
     * {@snippet :
     * float cbrtf(float __x);
     * }
     */
    public static float cbrtf(float __x) {
        var mh$ = cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__cbrtf$MH,"__cbrtf");
    }
    /**
     * {@snippet :
     * float __cbrtf(float __x);
     * }
     */
    public static float __cbrtf(float __x) {
        var mh$ = __cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.ceilf$MH,"ceilf");
    }
    /**
     * {@snippet :
     * float ceilf(float __x);
     * }
     */
    public static float ceilf(float __x) {
        var mh$ = ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.__ceilf$MH,"__ceilf");
    }
    /**
     * {@snippet :
     * float __ceilf(float __x);
     * }
     */
    public static float __ceilf(float __x) {
        var mh$ = __ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$51.fabsf$MH,"fabsf");
    }
    /**
     * {@snippet :
     * float fabsf(float __x);
     * }
     */
    public static float fabsf(float __x) {
        var mh$ = fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__fabsf$MH,"__fabsf");
    }
    /**
     * {@snippet :
     * float __fabsf(float __x);
     * }
     */
    public static float __fabsf(float __x) {
        var mh$ = __fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.floorf$MH,"floorf");
    }
    /**
     * {@snippet :
     * float floorf(float __x);
     * }
     */
    public static float floorf(float __x) {
        var mh$ = floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__floorf$MH,"__floorf");
    }
    /**
     * {@snippet :
     * float __floorf(float __x);
     * }
     */
    public static float __floorf(float __x) {
        var mh$ = __floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.fmodf$MH,"fmodf");
    }
    /**
     * {@snippet :
     * float fmodf(float __x, float __y);
     * }
     */
    public static float fmodf(float __x, float __y) {
        var mh$ = fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$52.__fmodf$MH,"__fmodf");
    }
    /**
     * {@snippet :
     * float __fmodf(float __x, float __y);
     * }
     */
    public static float __fmodf(float __x, float __y) {
        var mh$ = __fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$52.isinff$MH,"isinff");
    }
    /**
     * {@snippet :
     * int isinff(float __value);
     * }
     */
    public static int isinff(float __value) {
        var mh$ = isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$53.finitef$MH,"finitef");
    }
    /**
     * {@snippet :
     * int finitef(float __value);
     * }
     */
    public static int finitef(float __value) {
        var mh$ = finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.dremf$MH,"dremf");
    }
    /**
     * {@snippet :
     * float dremf(float __x, float __y);
     * }
     */
    public static float dremf(float __x, float __y) {
        var mh$ = dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.__dremf$MH,"__dremf");
    }
    /**
     * {@snippet :
     * float __dremf(float __x, float __y);
     * }
     */
    public static float __dremf(float __x, float __y) {
        var mh$ = __dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.significandf$MH,"significandf");
    }
    /**
     * {@snippet :
     * float significandf(float __x);
     * }
     */
    public static float significandf(float __x) {
        var mh$ = significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.__significandf$MH,"__significandf");
    }
    /**
     * {@snippet :
     * float __significandf(float __x);
     * }
     */
    public static float __significandf(float __x) {
        var mh$ = __significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$53.copysignf$MH,"copysignf");
    }
    /**
     * {@snippet :
     * float copysignf(float __x, float __y);
     * }
     */
    public static float copysignf(float __x, float __y) {
        var mh$ = copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__copysignf$MH,"__copysignf");
    }
    /**
     * {@snippet :
     * float __copysignf(float __x, float __y);
     * }
     */
    public static float __copysignf(float __x, float __y) {
        var mh$ = __copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.nanf$MH,"nanf");
    }
    /**
     * {@snippet :
     * float nanf(char* __tagb);
     * }
     */
    public static float nanf(MemorySegment __tagb) {
        var mh$ = nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__nanf$MH,"__nanf");
    }
    /**
     * {@snippet :
     * float __nanf(char* __tagb);
     * }
     */
    public static float __nanf(MemorySegment __tagb) {
        var mh$ = __nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$54.isnanf$MH,"isnanf");
    }
    /**
     * {@snippet :
     * int isnanf(float __value);
     * }
     */
    public static int isnanf(float __value) {
        var mh$ = isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$54.j0f$MH,"j0f");
    }
    /**
     * {@snippet :
     * float j0f(float);
     * }
     */
    public static float j0f(float x0) {
        var mh$ = j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$54.__j0f$MH,"__j0f");
    }
    /**
     * {@snippet :
     * float __j0f(float);
     * }
     */
    public static float __j0f(float x0) {
        var mh$ = __j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$55.j1f$MH,"j1f");
    }
    /**
     * {@snippet :
     * float j1f(float);
     * }
     */
    public static float j1f(float x0) {
        var mh$ = j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__j1f$MH,"__j1f");
    }
    /**
     * {@snippet :
     * float __j1f(float);
     * }
     */
    public static float __j1f(float x0) {
        var mh$ = __j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$55.jnf$MH,"jnf");
    }
    /**
     * {@snippet :
     * float jnf(int, float);
     * }
     */
    public static float jnf(int x0, float x1) {
        var mh$ = jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__jnf$MH,"__jnf");
    }
    /**
     * {@snippet :
     * float __jnf(int, float);
     * }
     */
    public static float __jnf(int x0, float x1) {
        var mh$ = __jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$55.y0f$MH,"y0f");
    }
    /**
     * {@snippet :
     * float y0f(float);
     * }
     */
    public static float y0f(float x0) {
        var mh$ = y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$55.__y0f$MH,"__y0f");
    }
    /**
     * {@snippet :
     * float __y0f(float);
     * }
     */
    public static float __y0f(float x0) {
        var mh$ = __y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$56.y1f$MH,"y1f");
    }
    /**
     * {@snippet :
     * float y1f(float);
     * }
     */
    public static float y1f(float x0) {
        var mh$ = y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__y1f$MH,"__y1f");
    }
    /**
     * {@snippet :
     * float __y1f(float);
     * }
     */
    public static float __y1f(float x0) {
        var mh$ = __y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.ynf$MH,"ynf");
    }
    /**
     * {@snippet :
     * float ynf(int, float);
     * }
     */
    public static float ynf(int x0, float x1) {
        var mh$ = ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__ynf$MH,"__ynf");
    }
    /**
     * {@snippet :
     * float __ynf(int, float);
     * }
     */
    public static float __ynf(int x0, float x1) {
        var mh$ = __ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erff$MH() {
        return RuntimeHelper.requireNonNull(constants$56.erff$MH,"erff");
    }
    /**
     * {@snippet :
     * float erff(float);
     * }
     */
    public static float erff(float x0) {
        var mh$ = erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erff$MH() {
        return RuntimeHelper.requireNonNull(constants$56.__erff$MH,"__erff");
    }
    /**
     * {@snippet :
     * float __erff(float);
     * }
     */
    public static float __erff(float x0) {
        var mh$ = __erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.erfcf$MH,"erfcf");
    }
    /**
     * {@snippet :
     * float erfcf(float);
     * }
     */
    public static float erfcf(float x0) {
        var mh$ = erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__erfcf$MH,"__erfcf");
    }
    /**
     * {@snippet :
     * float __erfcf(float);
     * }
     */
    public static float __erfcf(float x0) {
        var mh$ = __erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.lgammaf$MH,"lgammaf");
    }
    /**
     * {@snippet :
     * float lgammaf(float);
     * }
     */
    public static float lgammaf(float x0) {
        var mh$ = lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__lgammaf$MH,"__lgammaf");
    }
    /**
     * {@snippet :
     * float __lgammaf(float);
     * }
     */
    public static float __lgammaf(float x0) {
        var mh$ = __lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.tgammaf$MH,"tgammaf");
    }
    /**
     * {@snippet :
     * float tgammaf(float);
     * }
     */
    public static float tgammaf(float x0) {
        var mh$ = tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$57.__tgammaf$MH,"__tgammaf");
    }
    /**
     * {@snippet :
     * float __tgammaf(float);
     * }
     */
    public static float __tgammaf(float x0) {
        var mh$ = __tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$58.gammaf$MH,"gammaf");
    }
    /**
     * {@snippet :
     * float gammaf(float);
     * }
     */
    public static float gammaf(float x0) {
        var mh$ = gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__gammaf$MH,"__gammaf");
    }
    /**
     * {@snippet :
     * float __gammaf(float);
     * }
     */
    public static float __gammaf(float x0) {
        var mh$ = __gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$58.lgammaf_r$MH,"lgammaf_r");
    }
    /**
     * {@snippet :
     * float lgammaf_r(float, int* __signgamp);
     * }
     */
    public static float lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__lgammaf_r$MH,"__lgammaf_r");
    }
    /**
     * {@snippet :
     * float __lgammaf_r(float, int* __signgamp);
     * }
     */
    public static float __lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = __lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$58.rintf$MH,"rintf");
    }
    /**
     * {@snippet :
     * float rintf(float __x);
     * }
     */
    public static float rintf(float __x) {
        var mh$ = rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$58.__rintf$MH,"__rintf");
    }
    /**
     * {@snippet :
     * float __rintf(float __x);
     * }
     */
    public static float __rintf(float __x) {
        var mh$ = __rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$59.nextafterf$MH,"nextafterf");
    }
    /**
     * {@snippet :
     * float nextafterf(float __x, float __y);
     * }
     */
    public static float nextafterf(float __x, float __y) {
        var mh$ = nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__nextafterf$MH,"__nextafterf");
    }
    /**
     * {@snippet :
     * float __nextafterf(float __x, float __y);
     * }
     */
    public static float __nextafterf(float __x, float __y) {
        var mh$ = __nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$59.remainderf$MH,"remainderf");
    }
    /**
     * {@snippet :
     * float remainderf(float __x, float __y);
     * }
     */
    public static float remainderf(float __x, float __y) {
        var mh$ = remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__remainderf$MH,"__remainderf");
    }
    /**
     * {@snippet :
     * float __remainderf(float __x, float __y);
     * }
     */
    public static float __remainderf(float __x, float __y) {
        var mh$ = __remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$59.scalbnf$MH,"scalbnf");
    }
    /**
     * {@snippet :
     * float scalbnf(float __x, int __n);
     * }
     */
    public static float scalbnf(float __x, int __n) {
        var mh$ = scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$59.__scalbnf$MH,"__scalbnf");
    }
    /**
     * {@snippet :
     * float __scalbnf(float __x, int __n);
     * }
     */
    public static float __scalbnf(float __x, int __n) {
        var mh$ = __scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$60.ilogbf$MH,"ilogbf");
    }
    /**
     * {@snippet :
     * int ilogbf(float __x);
     * }
     */
    public static int ilogbf(float __x) {
        var mh$ = ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__ilogbf$MH,"__ilogbf");
    }
    /**
     * {@snippet :
     * int __ilogbf(float __x);
     * }
     */
    public static int __ilogbf(float __x) {
        var mh$ = __ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$60.scalblnf$MH,"scalblnf");
    }
    /**
     * {@snippet :
     * float scalblnf(float __x, long __n);
     * }
     */
    public static float scalblnf(float __x, long __n) {
        var mh$ = scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__scalblnf$MH,"__scalblnf");
    }
    /**
     * {@snippet :
     * float __scalblnf(float __x, long __n);
     * }
     */
    public static float __scalblnf(float __x, long __n) {
        var mh$ = __scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$60.nearbyintf$MH,"nearbyintf");
    }
    /**
     * {@snippet :
     * float nearbyintf(float __x);
     * }
     */
    public static float nearbyintf(float __x) {
        var mh$ = nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$60.__nearbyintf$MH,"__nearbyintf");
    }
    /**
     * {@snippet :
     * float __nearbyintf(float __x);
     * }
     */
    public static float __nearbyintf(float __x) {
        var mh$ = __nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$61.roundf$MH,"roundf");
    }
    /**
     * {@snippet :
     * float roundf(float __x);
     * }
     */
    public static float roundf(float __x) {
        var mh$ = roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__roundf$MH,"__roundf");
    }
    /**
     * {@snippet :
     * float __roundf(float __x);
     * }
     */
    public static float __roundf(float __x) {
        var mh$ = __roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$61.truncf$MH,"truncf");
    }
    /**
     * {@snippet :
     * float truncf(float __x);
     * }
     */
    public static float truncf(float __x) {
        var mh$ = truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__truncf$MH,"__truncf");
    }
    /**
     * {@snippet :
     * float __truncf(float __x);
     * }
     */
    public static float __truncf(float __x) {
        var mh$ = __truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$61.remquof$MH,"remquof");
    }
    /**
     * {@snippet :
     * float remquof(float __x, float __y, int* __quo);
     * }
     */
    public static float remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$61.__remquof$MH,"__remquof");
    }
    /**
     * {@snippet :
     * float __remquof(float __x, float __y, int* __quo);
     * }
     */
    public static float __remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = __remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.lrintf$MH,"lrintf");
    }
    /**
     * {@snippet :
     * long lrintf(float __x);
     * }
     */
    public static long lrintf(float __x) {
        var mh$ = lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.__lrintf$MH,"__lrintf");
    }
    /**
     * {@snippet :
     * long __lrintf(float __x);
     * }
     */
    public static long __lrintf(float __x) {
        var mh$ = __lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.llrintf$MH,"llrintf");
    }
    /**
     * {@snippet :
     * long long llrintf(float __x);
     * }
     */
    public static long llrintf(float __x) {
        var mh$ = llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.__llrintf$MH,"__llrintf");
    }
    /**
     * {@snippet :
     * long long __llrintf(float __x);
     * }
     */
    public static long __llrintf(float __x) {
        var mh$ = __llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.lroundf$MH,"lroundf");
    }
    /**
     * {@snippet :
     * long lroundf(float __x);
     * }
     */
    public static long lroundf(float __x) {
        var mh$ = lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$62.__lroundf$MH,"__lroundf");
    }
    /**
     * {@snippet :
     * long __lroundf(float __x);
     * }
     */
    public static long __lroundf(float __x) {
        var mh$ = __lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$63.llroundf$MH,"llroundf");
    }
    /**
     * {@snippet :
     * long long llroundf(float __x);
     * }
     */
    public static long llroundf(float __x) {
        var mh$ = llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$63.__llroundf$MH,"__llroundf");
    }
    /**
     * {@snippet :
     * long long __llroundf(float __x);
     * }
     */
    public static long __llroundf(float __x) {
        var mh$ = __llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$63.fdimf$MH,"fdimf");
    }
    /**
     * {@snippet :
     * float fdimf(float __x, float __y);
     * }
     */
    public static float fdimf(float __x, float __y) {
        var mh$ = fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$63.__fdimf$MH,"__fdimf");
    }
    /**
     * {@snippet :
     * float __fdimf(float __x, float __y);
     * }
     */
    public static float __fdimf(float __x, float __y) {
        var mh$ = __fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$63.fmaxf$MH,"fmaxf");
    }
    /**
     * {@snippet :
     * float fmaxf(float __x, float __y);
     * }
     */
    public static float fmaxf(float __x, float __y) {
        var mh$ = fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$63.__fmaxf$MH,"__fmaxf");
    }
    /**
     * {@snippet :
     * float __fmaxf(float __x, float __y);
     * }
     */
    public static float __fmaxf(float __x, float __y) {
        var mh$ = __fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$64.fminf$MH,"fminf");
    }
    /**
     * {@snippet :
     * float fminf(float __x, float __y);
     * }
     */
    public static float fminf(float __x, float __y) {
        var mh$ = fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$64.__fminf$MH,"__fminf");
    }
    /**
     * {@snippet :
     * float __fminf(float __x, float __y);
     * }
     */
    public static float __fminf(float __x, float __y) {
        var mh$ = __fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$64.fmaf$MH,"fmaf");
    }
    /**
     * {@snippet :
     * float fmaf(float __x, float __y, float __z);
     * }
     */
    public static float fmaf(float __x, float __y, float __z) {
        var mh$ = fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$64.__fmaf$MH,"__fmaf");
    }
    /**
     * {@snippet :
     * float __fmaf(float __x, float __y, float __z);
     * }
     */
    public static float __fmaf(float __x, float __y, float __z) {
        var mh$ = __fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$64.scalbf$MH,"scalbf");
    }
    /**
     * {@snippet :
     * float scalbf(float __x, float __n);
     * }
     */
    public static float scalbf(float __x, float __n) {
        var mh$ = scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$64.__scalbf$MH,"__scalbf");
    }
    /**
     * {@snippet :
     * float __scalbf(float __x, float __n);
     * }
     */
    public static float __scalbf(float __x, float __n) {
        var mh$ = __scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout signgam$LAYOUT() {
        return constants$65.signgam$LAYOUT;
    }
    public static VarHandle signgam$VH() {
        return constants$65.signgam$VH;
    }
    public static MemorySegment signgam$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$65.signgam$SEGMENT,"signgam");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int signgam;
     * }
     */
    public static int signgam$get() {
        return (int) constants$65.signgam$VH.get(RuntimeHelper.requireNonNull(constants$65.signgam$SEGMENT, "signgam"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int signgam;
     * }
     */
    public static void signgam$set(int x) {
        constants$65.signgam$VH.set(RuntimeHelper.requireNonNull(constants$65.signgam$SEGMENT, "signgam"), x);
    }
    /**
     * {@snippet :
     * enum rs2_notification_category.RS2_NOTIFICATION_CATEGORY_FRAMES_TIMEOUT = 0;
     * }
     */
    public static int RS2_NOTIFICATION_CATEGORY_FRAMES_TIMEOUT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_notification_category.RS2_NOTIFICATION_CATEGORY_FRAME_CORRUPTED = 1;
     * }
     */
    public static int RS2_NOTIFICATION_CATEGORY_FRAME_CORRUPTED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_notification_category.RS2_NOTIFICATION_CATEGORY_HARDWARE_ERROR = 2;
     * }
     */
    public static int RS2_NOTIFICATION_CATEGORY_HARDWARE_ERROR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_notification_category.RS2_NOTIFICATION_CATEGORY_HARDWARE_EVENT = 3;
     * }
     */
    public static int RS2_NOTIFICATION_CATEGORY_HARDWARE_EVENT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_notification_category.RS2_NOTIFICATION_CATEGORY_UNKNOWN_ERROR = 4;
     * }
     */
    public static int RS2_NOTIFICATION_CATEGORY_UNKNOWN_ERROR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_notification_category.RS2_NOTIFICATION_CATEGORY_FIRMWARE_UPDATE_RECOMMENDED = 5;
     * }
     */
    public static int RS2_NOTIFICATION_CATEGORY_FIRMWARE_UPDATE_RECOMMENDED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum rs2_notification_category.RS2_NOTIFICATION_CATEGORY_POSE_RELOCALIZATION = 6;
     * }
     */
    public static int RS2_NOTIFICATION_CATEGORY_POSE_RELOCALIZATION() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum rs2_notification_category.RS2_NOTIFICATION_CATEGORY_COUNT = 7;
     * }
     */
    public static int RS2_NOTIFICATION_CATEGORY_COUNT() {
        return (int)7L;
    }
    public static MethodHandle rs2_notification_category_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$65.rs2_notification_category_to_string$MH,"rs2_notification_category_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_notification_category_to_string(rs2_notification_category category);
     * }
     */
    public static MemorySegment rs2_notification_category_to_string(int category) {
        var mh$ = rs2_notification_category_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(category);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_exception_type.RS2_EXCEPTION_TYPE_UNKNOWN = 0;
     * }
     */
    public static int RS2_EXCEPTION_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_exception_type.RS2_EXCEPTION_TYPE_CAMERA_DISCONNECTED = 1;
     * }
     */
    public static int RS2_EXCEPTION_TYPE_CAMERA_DISCONNECTED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_exception_type.RS2_EXCEPTION_TYPE_BACKEND = 2;
     * }
     */
    public static int RS2_EXCEPTION_TYPE_BACKEND() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_exception_type.RS2_EXCEPTION_TYPE_INVALID_VALUE = 3;
     * }
     */
    public static int RS2_EXCEPTION_TYPE_INVALID_VALUE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_exception_type.RS2_EXCEPTION_TYPE_WRONG_API_CALL_SEQUENCE = 4;
     * }
     */
    public static int RS2_EXCEPTION_TYPE_WRONG_API_CALL_SEQUENCE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_exception_type.RS2_EXCEPTION_TYPE_NOT_IMPLEMENTED = 5;
     * }
     */
    public static int RS2_EXCEPTION_TYPE_NOT_IMPLEMENTED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum rs2_exception_type.RS2_EXCEPTION_TYPE_DEVICE_IN_RECOVERY_MODE = 6;
     * }
     */
    public static int RS2_EXCEPTION_TYPE_DEVICE_IN_RECOVERY_MODE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum rs2_exception_type.RS2_EXCEPTION_TYPE_IO = 7;
     * }
     */
    public static int RS2_EXCEPTION_TYPE_IO() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum rs2_exception_type.RS2_EXCEPTION_TYPE_COUNT = 8;
     * }
     */
    public static int RS2_EXCEPTION_TYPE_COUNT() {
        return (int)8L;
    }
    public static MethodHandle rs2_exception_type_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$65.rs2_exception_type_to_string$MH,"rs2_exception_type_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_exception_type_to_string(rs2_exception_type type);
     * }
     */
    public static MemorySegment rs2_exception_type_to_string(int type) {
        var mh$ = rs2_exception_type_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_distortion.RS2_DISTORTION_NONE = 0;
     * }
     */
    public static int RS2_DISTORTION_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_distortion.RS2_DISTORTION_MODIFIED_BROWN_CONRADY = 1;
     * }
     */
    public static int RS2_DISTORTION_MODIFIED_BROWN_CONRADY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_distortion.RS2_DISTORTION_INVERSE_BROWN_CONRADY = 2;
     * }
     */
    public static int RS2_DISTORTION_INVERSE_BROWN_CONRADY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_distortion.RS2_DISTORTION_FTHETA = 3;
     * }
     */
    public static int RS2_DISTORTION_FTHETA() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_distortion.RS2_DISTORTION_BROWN_CONRADY = 4;
     * }
     */
    public static int RS2_DISTORTION_BROWN_CONRADY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_distortion.RS2_DISTORTION_KANNALA_BRANDT4 = 5;
     * }
     */
    public static int RS2_DISTORTION_KANNALA_BRANDT4() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum rs2_distortion.RS2_DISTORTION_COUNT = 6;
     * }
     */
    public static int RS2_DISTORTION_COUNT() {
        return (int)6L;
    }
    public static MethodHandle rs2_distortion_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$65.rs2_distortion_to_string$MH,"rs2_distortion_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_distortion_to_string(rs2_distortion distortion);
     * }
     */
    public static MemorySegment rs2_distortion_to_string(int distortion) {
        var mh$ = rs2_distortion_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(distortion);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_dsm_correction_model.RS2_DSM_CORRECTION_NONE = 0;
     * }
     */
    public static int RS2_DSM_CORRECTION_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_dsm_correction_model.RS2_DSM_CORRECTION_AOT = 1;
     * }
     */
    public static int RS2_DSM_CORRECTION_AOT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_dsm_correction_model.RS2_DSM_CORRECTION_TOA = 2;
     * }
     */
    public static int RS2_DSM_CORRECTION_TOA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_dsm_correction_model.RS2_DSM_CORRECTION_COUNT = 3;
     * }
     */
    public static int RS2_DSM_CORRECTION_COUNT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_log_severity.RS2_LOG_SEVERITY_DEBUG = 0;
     * }
     */
    public static int RS2_LOG_SEVERITY_DEBUG() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_log_severity.RS2_LOG_SEVERITY_INFO = 1;
     * }
     */
    public static int RS2_LOG_SEVERITY_INFO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_log_severity.RS2_LOG_SEVERITY_WARN = 2;
     * }
     */
    public static int RS2_LOG_SEVERITY_WARN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_log_severity.RS2_LOG_SEVERITY_ERROR = 3;
     * }
     */
    public static int RS2_LOG_SEVERITY_ERROR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_log_severity.RS2_LOG_SEVERITY_FATAL = 4;
     * }
     */
    public static int RS2_LOG_SEVERITY_FATAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_log_severity.RS2_LOG_SEVERITY_NONE = 5;
     * }
     */
    public static int RS2_LOG_SEVERITY_NONE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum rs2_log_severity.RS2_LOG_SEVERITY_COUNT = 6;
     * }
     */
    public static int RS2_LOG_SEVERITY_COUNT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum rs2_log_severity.RS2_LOG_SEVERITY_ALL = 0;
     * }
     */
    public static int RS2_LOG_SEVERITY_ALL() {
        return (int)0L;
    }
    public static MethodHandle rs2_log_severity_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$65.rs2_log_severity_to_string$MH,"rs2_log_severity_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_log_severity_to_string(rs2_log_severity info);
     * }
     */
    public static MemorySegment rs2_log_severity_to_string(int info) {
        var mh$ = rs2_log_severity_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_UNKNOWN = 0;
     * }
     */
    public static int RS2_EXTENSION_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DEBUG = 1;
     * }
     */
    public static int RS2_EXTENSION_DEBUG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_INFO = 2;
     * }
     */
    public static int RS2_EXTENSION_INFO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_MOTION = 3;
     * }
     */
    public static int RS2_EXTENSION_MOTION() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_OPTIONS = 4;
     * }
     */
    public static int RS2_EXTENSION_OPTIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_VIDEO = 5;
     * }
     */
    public static int RS2_EXTENSION_VIDEO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_ROI = 6;
     * }
     */
    public static int RS2_EXTENSION_ROI() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DEPTH_SENSOR = 7;
     * }
     */
    public static int RS2_EXTENSION_DEPTH_SENSOR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_VIDEO_FRAME = 8;
     * }
     */
    public static int RS2_EXTENSION_VIDEO_FRAME() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_MOTION_FRAME = 9;
     * }
     */
    public static int RS2_EXTENSION_MOTION_FRAME() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_COMPOSITE_FRAME = 10;
     * }
     */
    public static int RS2_EXTENSION_COMPOSITE_FRAME() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_POINTS = 11;
     * }
     */
    public static int RS2_EXTENSION_POINTS() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DEPTH_FRAME = 12;
     * }
     */
    public static int RS2_EXTENSION_DEPTH_FRAME() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_ADVANCED_MODE = 13;
     * }
     */
    public static int RS2_EXTENSION_ADVANCED_MODE() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_RECORD = 14;
     * }
     */
    public static int RS2_EXTENSION_RECORD() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_VIDEO_PROFILE = 15;
     * }
     */
    public static int RS2_EXTENSION_VIDEO_PROFILE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_PLAYBACK = 16;
     * }
     */
    public static int RS2_EXTENSION_PLAYBACK() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DEPTH_STEREO_SENSOR = 17;
     * }
     */
    public static int RS2_EXTENSION_DEPTH_STEREO_SENSOR() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DISPARITY_FRAME = 18;
     * }
     */
    public static int RS2_EXTENSION_DISPARITY_FRAME() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_MOTION_PROFILE = 19;
     * }
     */
    public static int RS2_EXTENSION_MOTION_PROFILE() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_POSE_FRAME = 20;
     * }
     */
    public static int RS2_EXTENSION_POSE_FRAME() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_POSE_PROFILE = 21;
     * }
     */
    public static int RS2_EXTENSION_POSE_PROFILE() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_TM2 = 22;
     * }
     */
    public static int RS2_EXTENSION_TM2() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_SOFTWARE_DEVICE = 23;
     * }
     */
    public static int RS2_EXTENSION_SOFTWARE_DEVICE() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_SOFTWARE_SENSOR = 24;
     * }
     */
    public static int RS2_EXTENSION_SOFTWARE_SENSOR() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DECIMATION_FILTER = 25;
     * }
     */
    public static int RS2_EXTENSION_DECIMATION_FILTER() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_THRESHOLD_FILTER = 26;
     * }
     */
    public static int RS2_EXTENSION_THRESHOLD_FILTER() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DISPARITY_FILTER = 27;
     * }
     */
    public static int RS2_EXTENSION_DISPARITY_FILTER() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_SPATIAL_FILTER = 28;
     * }
     */
    public static int RS2_EXTENSION_SPATIAL_FILTER() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_TEMPORAL_FILTER = 29;
     * }
     */
    public static int RS2_EXTENSION_TEMPORAL_FILTER() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_HOLE_FILLING_FILTER = 30;
     * }
     */
    public static int RS2_EXTENSION_HOLE_FILLING_FILTER() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_ZERO_ORDER_FILTER = 31;
     * }
     */
    public static int RS2_EXTENSION_ZERO_ORDER_FILTER() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_RECOMMENDED_FILTERS = 32;
     * }
     */
    public static int RS2_EXTENSION_RECOMMENDED_FILTERS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_POSE = 33;
     * }
     */
    public static int RS2_EXTENSION_POSE() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_POSE_SENSOR = 34;
     * }
     */
    public static int RS2_EXTENSION_POSE_SENSOR() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_WHEEL_ODOMETER = 35;
     * }
     */
    public static int RS2_EXTENSION_WHEEL_ODOMETER() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_GLOBAL_TIMER = 36;
     * }
     */
    public static int RS2_EXTENSION_GLOBAL_TIMER() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_UPDATABLE = 37;
     * }
     */
    public static int RS2_EXTENSION_UPDATABLE() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_UPDATE_DEVICE = 38;
     * }
     */
    public static int RS2_EXTENSION_UPDATE_DEVICE() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_L500_DEPTH_SENSOR = 39;
     * }
     */
    public static int RS2_EXTENSION_L500_DEPTH_SENSOR() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_TM2_SENSOR = 40;
     * }
     */
    public static int RS2_EXTENSION_TM2_SENSOR() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_AUTO_CALIBRATED_DEVICE = 41;
     * }
     */
    public static int RS2_EXTENSION_AUTO_CALIBRATED_DEVICE() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_COLOR_SENSOR = 42;
     * }
     */
    public static int RS2_EXTENSION_COLOR_SENSOR() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_MOTION_SENSOR = 43;
     * }
     */
    public static int RS2_EXTENSION_MOTION_SENSOR() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_FISHEYE_SENSOR = 44;
     * }
     */
    public static int RS2_EXTENSION_FISHEYE_SENSOR() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DEPTH_HUFFMAN_DECODER = 45;
     * }
     */
    public static int RS2_EXTENSION_DEPTH_HUFFMAN_DECODER() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_SERIALIZABLE = 46;
     * }
     */
    public static int RS2_EXTENSION_SERIALIZABLE() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_FW_LOGGER = 47;
     * }
     */
    public static int RS2_EXTENSION_FW_LOGGER() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_AUTO_CALIBRATION_FILTER = 48;
     * }
     */
    public static int RS2_EXTENSION_AUTO_CALIBRATION_FILTER() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DEVICE_CALIBRATION = 49;
     * }
     */
    public static int RS2_EXTENSION_DEVICE_CALIBRATION() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_CALIBRATED_SENSOR = 50;
     * }
     */
    public static int RS2_EXTENSION_CALIBRATED_SENSOR() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_HDR_MERGE = 51;
     * }
     */
    public static int RS2_EXTENSION_HDR_MERGE() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_SEQUENCE_ID_FILTER = 52;
     * }
     */
    public static int RS2_EXTENSION_SEQUENCE_ID_FILTER() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_MAX_USABLE_RANGE_SENSOR = 53;
     * }
     */
    public static int RS2_EXTENSION_MAX_USABLE_RANGE_SENSOR() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_DEBUG_STREAM_SENSOR = 54;
     * }
     */
    public static int RS2_EXTENSION_DEBUG_STREAM_SENSOR() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_CALIBRATION_CHANGE_DEVICE = 55;
     * }
     */
    public static int RS2_EXTENSION_CALIBRATION_CHANGE_DEVICE() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * enum rs2_extension.RS2_EXTENSION_COUNT = 56;
     * }
     */
    public static int RS2_EXTENSION_COUNT() {
        return (int)56L;
    }
    public static MethodHandle rs2_extension_type_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$65.rs2_extension_type_to_string$MH,"rs2_extension_type_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_extension_type_to_string(rs2_extension type);
     * }
     */
    public static MemorySegment rs2_extension_type_to_string(int type) {
        var mh$ = rs2_extension_type_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_extension_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$66.rs2_extension_to_string$MH,"rs2_extension_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_extension_to_string(rs2_extension type);
     * }
     */
    public static MemorySegment rs2_extension_to_string(int type) {
        var mh$ = rs2_extension_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_matchers.RS2_MATCHER_DI = 0;
     * }
     */
    public static int RS2_MATCHER_DI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_matchers.RS2_MATCHER_DI_C = 1;
     * }
     */
    public static int RS2_MATCHER_DI_C() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_matchers.RS2_MATCHER_DLR_C = 2;
     * }
     */
    public static int RS2_MATCHER_DLR_C() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_matchers.RS2_MATCHER_DLR = 3;
     * }
     */
    public static int RS2_MATCHER_DLR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_matchers.RS2_MATCHER_DIC = 4;
     * }
     */
    public static int RS2_MATCHER_DIC() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_matchers.RS2_MATCHER_DIC_C = 5;
     * }
     */
    public static int RS2_MATCHER_DIC_C() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum rs2_matchers.RS2_MATCHER_DEFAULT = 6;
     * }
     */
    public static int RS2_MATCHER_DEFAULT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum rs2_matchers.RS2_MATCHER_COUNT = 7;
     * }
     */
    public static int RS2_MATCHER_COUNT() {
        return (int)7L;
    }
    public static MethodHandle rs2_matchers_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$66.rs2_matchers_to_string$MH,"rs2_matchers_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_matchers_to_string(rs2_matchers stream);
     * }
     */
    public static MemorySegment rs2_matchers_to_string(int stream) {
        var mh$ = rs2_matchers_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef double rs2_time_t;
     * }
     */
    public static final OfDouble rs2_time_t = Constants$root.C_DOUBLE$LAYOUT;
    /**
     * {@snippet :
     * typedef long long rs2_metadata_type;
     * }
     */
    public static final OfLong rs2_metadata_type = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle rs2_create_error$MH() {
        return RuntimeHelper.requireNonNull(constants$68.rs2_create_error$MH,"rs2_create_error");
    }
    /**
     * {@snippet :
     * rs2_error* rs2_create_error(char* what, char* name, char* args, rs2_exception_type type);
     * }
     */
    public static MemorySegment rs2_create_error(MemorySegment what, MemorySegment name, MemorySegment args, int type) {
        var mh$ = rs2_create_error$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(what, name, args, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_librealsense_exception_type$MH() {
        return RuntimeHelper.requireNonNull(constants$68.rs2_get_librealsense_exception_type$MH,"rs2_get_librealsense_exception_type");
    }
    /**
     * {@snippet :
     * rs2_exception_type rs2_get_librealsense_exception_type(const rs2_error* error);
     * }
     */
    public static int rs2_get_librealsense_exception_type(MemorySegment error) {
        var mh$ = rs2_get_librealsense_exception_type$MH();
        try {
            return (int)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_failed_function$MH() {
        return RuntimeHelper.requireNonNull(constants$69.rs2_get_failed_function$MH,"rs2_get_failed_function");
    }
    /**
     * {@snippet :
     * char* rs2_get_failed_function(const rs2_error* error);
     * }
     */
    public static MemorySegment rs2_get_failed_function(MemorySegment error) {
        var mh$ = rs2_get_failed_function$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_failed_args$MH() {
        return RuntimeHelper.requireNonNull(constants$69.rs2_get_failed_args$MH,"rs2_get_failed_args");
    }
    /**
     * {@snippet :
     * char* rs2_get_failed_args(const rs2_error* error);
     * }
     */
    public static MemorySegment rs2_get_failed_args(MemorySegment error) {
        var mh$ = rs2_get_failed_args$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_error_message$MH() {
        return RuntimeHelper.requireNonNull(constants$69.rs2_get_error_message$MH,"rs2_get_error_message");
    }
    /**
     * {@snippet :
     * char* rs2_get_error_message(const rs2_error* error);
     * }
     */
    public static MemorySegment rs2_get_error_message(MemorySegment error) {
        var mh$ = rs2_get_error_message$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_free_error$MH() {
        return RuntimeHelper.requireNonNull(constants$69.rs2_free_error$MH,"rs2_free_error");
    }
    /**
     * {@snippet :
     * void rs2_free_error(rs2_error* error);
     * }
     */
    public static void rs2_free_error(MemorySegment error) {
        var mh$ = rs2_free_error$MH();
        try {
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_NAME = 0;
     * }
     */
    public static int RS2_CAMERA_INFO_NAME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_SERIAL_NUMBER = 1;
     * }
     */
    public static int RS2_CAMERA_INFO_SERIAL_NUMBER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_FIRMWARE_VERSION = 2;
     * }
     */
    public static int RS2_CAMERA_INFO_FIRMWARE_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_RECOMMENDED_FIRMWARE_VERSION = 3;
     * }
     */
    public static int RS2_CAMERA_INFO_RECOMMENDED_FIRMWARE_VERSION() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_PHYSICAL_PORT = 4;
     * }
     */
    public static int RS2_CAMERA_INFO_PHYSICAL_PORT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_DEBUG_OP_CODE = 5;
     * }
     */
    public static int RS2_CAMERA_INFO_DEBUG_OP_CODE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_ADVANCED_MODE = 6;
     * }
     */
    public static int RS2_CAMERA_INFO_ADVANCED_MODE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_PRODUCT_ID = 7;
     * }
     */
    public static int RS2_CAMERA_INFO_PRODUCT_ID() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_CAMERA_LOCKED = 8;
     * }
     */
    public static int RS2_CAMERA_INFO_CAMERA_LOCKED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_USB_TYPE_DESCRIPTOR = 9;
     * }
     */
    public static int RS2_CAMERA_INFO_USB_TYPE_DESCRIPTOR() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_PRODUCT_LINE = 10;
     * }
     */
    public static int RS2_CAMERA_INFO_PRODUCT_LINE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_ASIC_SERIAL_NUMBER = 11;
     * }
     */
    public static int RS2_CAMERA_INFO_ASIC_SERIAL_NUMBER() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_FIRMWARE_UPDATE_ID = 12;
     * }
     */
    public static int RS2_CAMERA_INFO_FIRMWARE_UPDATE_ID() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_IP_ADDRESS = 13;
     * }
     */
    public static int RS2_CAMERA_INFO_IP_ADDRESS() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum rs2_camera_info.RS2_CAMERA_INFO_COUNT = 14;
     * }
     */
    public static int RS2_CAMERA_INFO_COUNT() {
        return (int)14L;
    }
    public static MethodHandle rs2_camera_info_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$69.rs2_camera_info_to_string$MH,"rs2_camera_info_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_camera_info_to_string(rs2_camera_info info);
     * }
     */
    public static MemorySegment rs2_camera_info_to_string(int info) {
        var mh$ = rs2_camera_info_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_ANY = 0;
     * }
     */
    public static int RS2_STREAM_ANY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_DEPTH = 1;
     * }
     */
    public static int RS2_STREAM_DEPTH() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_COLOR = 2;
     * }
     */
    public static int RS2_STREAM_COLOR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_INFRARED = 3;
     * }
     */
    public static int RS2_STREAM_INFRARED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_FISHEYE = 4;
     * }
     */
    public static int RS2_STREAM_FISHEYE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_GYRO = 5;
     * }
     */
    public static int RS2_STREAM_GYRO() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_ACCEL = 6;
     * }
     */
    public static int RS2_STREAM_ACCEL() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_GPIO = 7;
     * }
     */
    public static int RS2_STREAM_GPIO() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_POSE = 8;
     * }
     */
    public static int RS2_STREAM_POSE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_CONFIDENCE = 9;
     * }
     */
    public static int RS2_STREAM_CONFIDENCE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum rs2_stream.RS2_STREAM_COUNT = 10;
     * }
     */
    public static int RS2_STREAM_COUNT() {
        return (int)10L;
    }
    public static MethodHandle rs2_stream_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$69.rs2_stream_to_string$MH,"rs2_stream_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_stream_to_string(rs2_stream stream);
     * }
     */
    public static MemorySegment rs2_stream_to_string(int stream) {
        var mh$ = rs2_stream_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_ANY = 0;
     * }
     */
    public static int RS2_FORMAT_ANY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_Z16 = 1;
     * }
     */
    public static int RS2_FORMAT_Z16() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_DISPARITY16 = 2;
     * }
     */
    public static int RS2_FORMAT_DISPARITY16() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_XYZ32F = 3;
     * }
     */
    public static int RS2_FORMAT_XYZ32F() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_YUYV = 4;
     * }
     */
    public static int RS2_FORMAT_YUYV() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_RGB8 = 5;
     * }
     */
    public static int RS2_FORMAT_RGB8() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_BGR8 = 6;
     * }
     */
    public static int RS2_FORMAT_BGR8() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_RGBA8 = 7;
     * }
     */
    public static int RS2_FORMAT_RGBA8() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_BGRA8 = 8;
     * }
     */
    public static int RS2_FORMAT_BGRA8() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_Y8 = 9;
     * }
     */
    public static int RS2_FORMAT_Y8() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_Y16 = 10;
     * }
     */
    public static int RS2_FORMAT_Y16() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_RAW10 = 11;
     * }
     */
    public static int RS2_FORMAT_RAW10() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_RAW16 = 12;
     * }
     */
    public static int RS2_FORMAT_RAW16() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_RAW8 = 13;
     * }
     */
    public static int RS2_FORMAT_RAW8() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_UYVY = 14;
     * }
     */
    public static int RS2_FORMAT_UYVY() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_MOTION_RAW = 15;
     * }
     */
    public static int RS2_FORMAT_MOTION_RAW() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_MOTION_XYZ32F = 16;
     * }
     */
    public static int RS2_FORMAT_MOTION_XYZ32F() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_GPIO_RAW = 17;
     * }
     */
    public static int RS2_FORMAT_GPIO_RAW() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_6DOF = 18;
     * }
     */
    public static int RS2_FORMAT_6DOF() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_DISPARITY32 = 19;
     * }
     */
    public static int RS2_FORMAT_DISPARITY32() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_Y10BPACK = 20;
     * }
     */
    public static int RS2_FORMAT_Y10BPACK() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_DISTANCE = 21;
     * }
     */
    public static int RS2_FORMAT_DISTANCE() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_MJPEG = 22;
     * }
     */
    public static int RS2_FORMAT_MJPEG() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_Y8I = 23;
     * }
     */
    public static int RS2_FORMAT_Y8I() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_Y12I = 24;
     * }
     */
    public static int RS2_FORMAT_Y12I() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_INZI = 25;
     * }
     */
    public static int RS2_FORMAT_INZI() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_INVI = 26;
     * }
     */
    public static int RS2_FORMAT_INVI() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_W10 = 27;
     * }
     */
    public static int RS2_FORMAT_W10() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_Z16H = 28;
     * }
     */
    public static int RS2_FORMAT_Z16H() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_FG = 29;
     * }
     */
    public static int RS2_FORMAT_FG() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_Y411 = 30;
     * }
     */
    public static int RS2_FORMAT_Y411() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_Y16I = 31;
     * }
     */
    public static int RS2_FORMAT_Y16I() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * enum rs2_format.RS2_FORMAT_COUNT = 32;
     * }
     */
    public static int RS2_FORMAT_COUNT() {
        return (int)32L;
    }
    public static MethodHandle rs2_format_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$70.rs2_format_to_string$MH,"rs2_format_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_format_to_string(rs2_format format);
     * }
     */
    public static MemorySegment rs2_format_to_string(int format) {
        var mh$ = rs2_format_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_delete_sensor_list$MH() {
        return RuntimeHelper.requireNonNull(constants$70.rs2_delete_sensor_list$MH,"rs2_delete_sensor_list");
    }
    /**
     * {@snippet :
     * void rs2_delete_sensor_list(rs2_sensor_list* info_list);
     * }
     */
    public static void rs2_delete_sensor_list(MemorySegment info_list) {
        var mh$ = rs2_delete_sensor_list$MH();
        try {
            mh$.invokeExact(info_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_sensors_count$MH() {
        return RuntimeHelper.requireNonNull(constants$70.rs2_get_sensors_count$MH,"rs2_get_sensors_count");
    }
    /**
     * {@snippet :
     * int rs2_get_sensors_count(const rs2_sensor_list* info_list, rs2_error** error);
     * }
     */
    public static int rs2_get_sensors_count(MemorySegment info_list, MemorySegment error) {
        var mh$ = rs2_get_sensors_count$MH();
        try {
            return (int)mh$.invokeExact(info_list, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_delete_sensor$MH() {
        return RuntimeHelper.requireNonNull(constants$70.rs2_delete_sensor$MH,"rs2_delete_sensor");
    }
    /**
     * {@snippet :
     * void rs2_delete_sensor(rs2_sensor* sensor);
     * }
     */
    public static void rs2_delete_sensor(MemorySegment sensor) {
        var mh$ = rs2_delete_sensor$MH();
        try {
            mh$.invokeExact(sensor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_create_sensor$MH() {
        return RuntimeHelper.requireNonNull(constants$70.rs2_create_sensor$MH,"rs2_create_sensor");
    }
    /**
     * {@snippet :
     * rs2_sensor* rs2_create_sensor(const rs2_sensor_list* list, int index, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_create_sensor(MemorySegment list, int index, MemorySegment error) {
        var mh$ = rs2_create_sensor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(list, index, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_create_device_from_sensor$MH() {
        return RuntimeHelper.requireNonNull(constants$70.rs2_create_device_from_sensor$MH,"rs2_create_device_from_sensor");
    }
    /**
     * {@snippet :
     * rs2_device* rs2_create_device_from_sensor(const rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_create_device_from_sensor(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_create_device_from_sensor$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_sensor_info$MH() {
        return RuntimeHelper.requireNonNull(constants$71.rs2_get_sensor_info$MH,"rs2_get_sensor_info");
    }
    /**
     * {@snippet :
     * char* rs2_get_sensor_info(const rs2_sensor* sensor, rs2_camera_info info, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_sensor_info(MemorySegment sensor, int info, MemorySegment error) {
        var mh$ = rs2_get_sensor_info$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor, info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_supports_sensor_info$MH() {
        return RuntimeHelper.requireNonNull(constants$71.rs2_supports_sensor_info$MH,"rs2_supports_sensor_info");
    }
    /**
     * {@snippet :
     * int rs2_supports_sensor_info(const rs2_sensor* sensor, rs2_camera_info info, rs2_error** error);
     * }
     */
    public static int rs2_supports_sensor_info(MemorySegment sensor, int info, MemorySegment error) {
        var mh$ = rs2_supports_sensor_info$MH();
        try {
            return (int)mh$.invokeExact(sensor, info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_is_sensor_extendable_to$MH() {
        return RuntimeHelper.requireNonNull(constants$71.rs2_is_sensor_extendable_to$MH,"rs2_is_sensor_extendable_to");
    }
    /**
     * {@snippet :
     * int rs2_is_sensor_extendable_to(const rs2_sensor* sensor, rs2_extension extension, rs2_error** error);
     * }
     */
    public static int rs2_is_sensor_extendable_to(MemorySegment sensor, int extension, MemorySegment error) {
        var mh$ = rs2_is_sensor_extendable_to$MH();
        try {
            return (int)mh$.invokeExact(sensor, extension, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_depth_scale$MH() {
        return RuntimeHelper.requireNonNull(constants$71.rs2_get_depth_scale$MH,"rs2_get_depth_scale");
    }
    /**
     * {@snippet :
     * float rs2_get_depth_scale(rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static float rs2_get_depth_scale(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_get_depth_scale$MH();
        try {
            return (float)mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_depth_stereo_frame_get_baseline$MH() {
        return RuntimeHelper.requireNonNull(constants$71.rs2_depth_stereo_frame_get_baseline$MH,"rs2_depth_stereo_frame_get_baseline");
    }
    /**
     * {@snippet :
     * float rs2_depth_stereo_frame_get_baseline(const rs2_frame* frame_ref, rs2_error** error);
     * }
     */
    public static float rs2_depth_stereo_frame_get_baseline(MemorySegment frame_ref, MemorySegment error) {
        var mh$ = rs2_depth_stereo_frame_get_baseline$MH();
        try {
            return (float)mh$.invokeExact(frame_ref, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_stereo_baseline$MH() {
        return RuntimeHelper.requireNonNull(constants$71.rs2_get_stereo_baseline$MH,"rs2_get_stereo_baseline");
    }
    /**
     * {@snippet :
     * float rs2_get_stereo_baseline(rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static float rs2_get_stereo_baseline(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_get_stereo_baseline$MH();
        try {
            return (float)mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_region_of_interest$MH() {
        return RuntimeHelper.requireNonNull(constants$72.rs2_set_region_of_interest$MH,"rs2_set_region_of_interest");
    }
    /**
     * {@snippet :
     * void rs2_set_region_of_interest(const rs2_sensor* sensor, int min_x, int min_y, int max_x, int max_y, rs2_error** error);
     * }
     */
    public static void rs2_set_region_of_interest(MemorySegment sensor, int min_x, int min_y, int max_x, int max_y, MemorySegment error) {
        var mh$ = rs2_set_region_of_interest$MH();
        try {
            mh$.invokeExact(sensor, min_x, min_y, max_x, max_y, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_region_of_interest$MH() {
        return RuntimeHelper.requireNonNull(constants$72.rs2_get_region_of_interest$MH,"rs2_get_region_of_interest");
    }
    /**
     * {@snippet :
     * void rs2_get_region_of_interest(const rs2_sensor* sensor, int* min_x, int* min_y, int* max_x, int* max_y, rs2_error** error);
     * }
     */
    public static void rs2_get_region_of_interest(MemorySegment sensor, MemorySegment min_x, MemorySegment min_y, MemorySegment max_x, MemorySegment max_y, MemorySegment error) {
        var mh$ = rs2_get_region_of_interest$MH();
        try {
            mh$.invokeExact(sensor, min_x, min_y, max_x, max_y, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_open$MH() {
        return RuntimeHelper.requireNonNull(constants$72.rs2_open$MH,"rs2_open");
    }
    /**
     * {@snippet :
     * void rs2_open(rs2_sensor* device, const rs2_stream_profile* profile, rs2_error** error);
     * }
     */
    public static void rs2_open(MemorySegment device, MemorySegment profile, MemorySegment error) {
        var mh$ = rs2_open$MH();
        try {
            mh$.invokeExact(device, profile, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_open_multiple$MH() {
        return RuntimeHelper.requireNonNull(constants$72.rs2_open_multiple$MH,"rs2_open_multiple");
    }
    /**
     * {@snippet :
     * void rs2_open_multiple(rs2_sensor* device, const rs2_stream_profile** profiles, int count, rs2_error** error);
     * }
     */
    public static void rs2_open_multiple(MemorySegment device, MemorySegment profiles, int count, MemorySegment error) {
        var mh$ = rs2_open_multiple$MH();
        try {
            mh$.invokeExact(device, profiles, count, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_close$MH() {
        return RuntimeHelper.requireNonNull(constants$72.rs2_close$MH,"rs2_close");
    }
    /**
     * {@snippet :
     * void rs2_close(const rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static void rs2_close(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_close$MH();
        try {
            mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_start$MH() {
        return RuntimeHelper.requireNonNull(constants$72.rs2_start$MH,"rs2_start");
    }
    /**
     * {@snippet :
     * void rs2_start(const rs2_sensor* sensor, rs2_frame_callback_ptr on_frame, void* user, rs2_error** error);
     * }
     */
    public static void rs2_start(MemorySegment sensor, MemorySegment on_frame, MemorySegment user, MemorySegment error) {
        var mh$ = rs2_start$MH();
        try {
            mh$.invokeExact(sensor, on_frame, user, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_start_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$73.rs2_start_cpp$MH,"rs2_start_cpp");
    }
    /**
     * {@snippet :
     * void rs2_start_cpp(const rs2_sensor* sensor, rs2_frame_callback* callback, rs2_error** error);
     * }
     */
    public static void rs2_start_cpp(MemorySegment sensor, MemorySegment callback, MemorySegment error) {
        var mh$ = rs2_start_cpp$MH();
        try {
            mh$.invokeExact(sensor, callback, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_start_queue$MH() {
        return RuntimeHelper.requireNonNull(constants$73.rs2_start_queue$MH,"rs2_start_queue");
    }
    /**
     * {@snippet :
     * void rs2_start_queue(const rs2_sensor* sensor, rs2_frame_queue* queue, rs2_error** error);
     * }
     */
    public static void rs2_start_queue(MemorySegment sensor, MemorySegment queue, MemorySegment error) {
        var mh$ = rs2_start_queue$MH();
        try {
            mh$.invokeExact(sensor, queue, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_stop$MH() {
        return RuntimeHelper.requireNonNull(constants$73.rs2_stop$MH,"rs2_stop");
    }
    /**
     * {@snippet :
     * void rs2_stop(const rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static void rs2_stop(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_stop$MH();
        try {
            mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_notifications_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$73.rs2_set_notifications_callback$MH,"rs2_set_notifications_callback");
    }
    /**
     * {@snippet :
     * void rs2_set_notifications_callback(const rs2_sensor* sensor, rs2_notification_callback_ptr on_notification, void* user, rs2_error** error);
     * }
     */
    public static void rs2_set_notifications_callback(MemorySegment sensor, MemorySegment on_notification, MemorySegment user, MemorySegment error) {
        var mh$ = rs2_set_notifications_callback$MH();
        try {
            mh$.invokeExact(sensor, on_notification, user, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_notifications_callback_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$73.rs2_set_notifications_callback_cpp$MH,"rs2_set_notifications_callback_cpp");
    }
    /**
     * {@snippet :
     * void rs2_set_notifications_callback_cpp(const rs2_sensor* sensor, rs2_notifications_callback* callback, rs2_error** error);
     * }
     */
    public static void rs2_set_notifications_callback_cpp(MemorySegment sensor, MemorySegment callback, MemorySegment error) {
        var mh$ = rs2_set_notifications_callback_cpp$MH();
        try {
            mh$.invokeExact(sensor, callback, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_notification_description$MH() {
        return RuntimeHelper.requireNonNull(constants$73.rs2_get_notification_description$MH,"rs2_get_notification_description");
    }
    /**
     * {@snippet :
     * char* rs2_get_notification_description(rs2_notification* notification, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_notification_description(MemorySegment notification, MemorySegment error) {
        var mh$ = rs2_get_notification_description$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(notification, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_notification_timestamp$MH() {
        return RuntimeHelper.requireNonNull(constants$74.rs2_get_notification_timestamp$MH,"rs2_get_notification_timestamp");
    }
    /**
     * {@snippet :
     * rs2_time_t rs2_get_notification_timestamp(rs2_notification* notification, rs2_error** error);
     * }
     */
    public static double rs2_get_notification_timestamp(MemorySegment notification, MemorySegment error) {
        var mh$ = rs2_get_notification_timestamp$MH();
        try {
            return (double)mh$.invokeExact(notification, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_notification_severity$MH() {
        return RuntimeHelper.requireNonNull(constants$74.rs2_get_notification_severity$MH,"rs2_get_notification_severity");
    }
    /**
     * {@snippet :
     * rs2_log_severity rs2_get_notification_severity(rs2_notification* notification, rs2_error** error);
     * }
     */
    public static int rs2_get_notification_severity(MemorySegment notification, MemorySegment error) {
        var mh$ = rs2_get_notification_severity$MH();
        try {
            return (int)mh$.invokeExact(notification, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_notification_category$MH() {
        return RuntimeHelper.requireNonNull(constants$74.rs2_get_notification_category$MH,"rs2_get_notification_category");
    }
    /**
     * {@snippet :
     * rs2_notification_category rs2_get_notification_category(rs2_notification* notification, rs2_error** error);
     * }
     */
    public static int rs2_get_notification_category(MemorySegment notification, MemorySegment error) {
        var mh$ = rs2_get_notification_category$MH();
        try {
            return (int)mh$.invokeExact(notification, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_notification_serialized_data$MH() {
        return RuntimeHelper.requireNonNull(constants$74.rs2_get_notification_serialized_data$MH,"rs2_get_notification_serialized_data");
    }
    /**
     * {@snippet :
     * char* rs2_get_notification_serialized_data(rs2_notification* notification, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_notification_serialized_data(MemorySegment notification, MemorySegment error) {
        var mh$ = rs2_get_notification_serialized_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(notification, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_stream_profiles$MH() {
        return RuntimeHelper.requireNonNull(constants$74.rs2_get_stream_profiles$MH,"rs2_get_stream_profiles");
    }
    /**
     * {@snippet :
     * rs2_stream_profile_list* rs2_get_stream_profiles(rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_stream_profiles(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_get_stream_profiles$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_debug_stream_profiles$MH() {
        return RuntimeHelper.requireNonNull(constants$74.rs2_get_debug_stream_profiles$MH,"rs2_get_debug_stream_profiles");
    }
    /**
     * {@snippet :
     * rs2_stream_profile_list* rs2_get_debug_stream_profiles(rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_debug_stream_profiles(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_get_debug_stream_profiles$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_active_streams$MH() {
        return RuntimeHelper.requireNonNull(constants$75.rs2_get_active_streams$MH,"rs2_get_active_streams");
    }
    /**
     * {@snippet :
     * rs2_stream_profile_list* rs2_get_active_streams(rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_active_streams(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_get_active_streams$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_stream_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$75.rs2_get_stream_profile$MH,"rs2_get_stream_profile");
    }
    /**
     * {@snippet :
     * const rs2_stream_profile* rs2_get_stream_profile(const rs2_stream_profile_list* list, int index, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_stream_profile(MemorySegment list, int index, MemorySegment error) {
        var mh$ = rs2_get_stream_profile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(list, index, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_stream_profile_data$MH() {
        return RuntimeHelper.requireNonNull(constants$75.rs2_get_stream_profile_data$MH,"rs2_get_stream_profile_data");
    }
    /**
     * {@snippet :
     * void rs2_get_stream_profile_data(const rs2_stream_profile* mode, rs2_stream* stream, rs2_format* format, int* index, int* unique_id, int* framerate, rs2_error** error);
     * }
     */
    public static void rs2_get_stream_profile_data(MemorySegment mode, MemorySegment stream, MemorySegment format, MemorySegment index, MemorySegment unique_id, MemorySegment framerate, MemorySegment error) {
        var mh$ = rs2_get_stream_profile_data$MH();
        try {
            mh$.invokeExact(mode, stream, format, index, unique_id, framerate, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_stream_profile_data$MH() {
        return RuntimeHelper.requireNonNull(constants$75.rs2_set_stream_profile_data$MH,"rs2_set_stream_profile_data");
    }
    /**
     * {@snippet :
     * void rs2_set_stream_profile_data(rs2_stream_profile* mode, rs2_stream stream, int index, rs2_format format, rs2_error** error);
     * }
     */
    public static void rs2_set_stream_profile_data(MemorySegment mode, int stream, int index, int format, MemorySegment error) {
        var mh$ = rs2_set_stream_profile_data$MH();
        try {
            mh$.invokeExact(mode, stream, index, format, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_clone_stream_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$75.rs2_clone_stream_profile$MH,"rs2_clone_stream_profile");
    }
    /**
     * {@snippet :
     * rs2_stream_profile* rs2_clone_stream_profile(const rs2_stream_profile* mode, rs2_stream stream, int index, rs2_format format, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_clone_stream_profile(MemorySegment mode, int stream, int index, int format, MemorySegment error) {
        var mh$ = rs2_clone_stream_profile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mode, stream, index, format, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_clone_video_stream_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$75.rs2_clone_video_stream_profile$MH,"rs2_clone_video_stream_profile");
    }
    /**
     * {@snippet :
     * rs2_stream_profile* rs2_clone_video_stream_profile(const rs2_stream_profile* mode, rs2_stream stream, int index, rs2_format format, int width, int height, const rs2_intrinsics* intr, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_clone_video_stream_profile(MemorySegment mode, int stream, int index, int format, int width, int height, MemorySegment intr, MemorySegment error) {
        var mh$ = rs2_clone_video_stream_profile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mode, stream, index, format, width, height, intr, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_delete_stream_profile$MH() {
        return RuntimeHelper.requireNonNull(constants$76.rs2_delete_stream_profile$MH,"rs2_delete_stream_profile");
    }
    /**
     * {@snippet :
     * void rs2_delete_stream_profile(rs2_stream_profile* mode);
     * }
     */
    public static void rs2_delete_stream_profile(MemorySegment mode) {
        var mh$ = rs2_delete_stream_profile$MH();
        try {
            mh$.invokeExact(mode);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_stream_profile_is$MH() {
        return RuntimeHelper.requireNonNull(constants$76.rs2_stream_profile_is$MH,"rs2_stream_profile_is");
    }
    /**
     * {@snippet :
     * int rs2_stream_profile_is(const rs2_stream_profile* mode, rs2_extension type, rs2_error** error);
     * }
     */
    public static int rs2_stream_profile_is(MemorySegment mode, int type, MemorySegment error) {
        var mh$ = rs2_stream_profile_is$MH();
        try {
            return (int)mh$.invokeExact(mode, type, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_video_stream_resolution$MH() {
        return RuntimeHelper.requireNonNull(constants$76.rs2_get_video_stream_resolution$MH,"rs2_get_video_stream_resolution");
    }
    /**
     * {@snippet :
     * void rs2_get_video_stream_resolution(const rs2_stream_profile* mode, int* width, int* height, rs2_error** error);
     * }
     */
    public static void rs2_get_video_stream_resolution(MemorySegment mode, MemorySegment width, MemorySegment height, MemorySegment error) {
        var mh$ = rs2_get_video_stream_resolution$MH();
        try {
            mh$.invokeExact(mode, width, height, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_motion_intrinsics$MH() {
        return RuntimeHelper.requireNonNull(constants$76.rs2_get_motion_intrinsics$MH,"rs2_get_motion_intrinsics");
    }
    /**
     * {@snippet :
     * void rs2_get_motion_intrinsics(const rs2_stream_profile* mode, rs2_motion_device_intrinsic* intrinsics, rs2_error** error);
     * }
     */
    public static void rs2_get_motion_intrinsics(MemorySegment mode, MemorySegment intrinsics, MemorySegment error) {
        var mh$ = rs2_get_motion_intrinsics$MH();
        try {
            mh$.invokeExact(mode, intrinsics, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_is_stream_profile_default$MH() {
        return RuntimeHelper.requireNonNull(constants$76.rs2_is_stream_profile_default$MH,"rs2_is_stream_profile_default");
    }
    /**
     * {@snippet :
     * int rs2_is_stream_profile_default(const rs2_stream_profile* mode, rs2_error** error);
     * }
     */
    public static int rs2_is_stream_profile_default(MemorySegment mode, MemorySegment error) {
        var mh$ = rs2_is_stream_profile_default$MH();
        try {
            return (int)mh$.invokeExact(mode, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_stream_profiles_count$MH() {
        return RuntimeHelper.requireNonNull(constants$76.rs2_get_stream_profiles_count$MH,"rs2_get_stream_profiles_count");
    }
    /**
     * {@snippet :
     * int rs2_get_stream_profiles_count(const rs2_stream_profile_list* list, rs2_error** error);
     * }
     */
    public static int rs2_get_stream_profiles_count(MemorySegment list, MemorySegment error) {
        var mh$ = rs2_get_stream_profiles_count$MH();
        try {
            return (int)mh$.invokeExact(list, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_delete_stream_profiles_list$MH() {
        return RuntimeHelper.requireNonNull(constants$77.rs2_delete_stream_profiles_list$MH,"rs2_delete_stream_profiles_list");
    }
    /**
     * {@snippet :
     * void rs2_delete_stream_profiles_list(rs2_stream_profile_list* list);
     * }
     */
    public static void rs2_delete_stream_profiles_list(MemorySegment list) {
        var mh$ = rs2_delete_stream_profiles_list$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_extrinsics$MH() {
        return RuntimeHelper.requireNonNull(constants$77.rs2_get_extrinsics$MH,"rs2_get_extrinsics");
    }
    /**
     * {@snippet :
     * void rs2_get_extrinsics(const rs2_stream_profile* from, const rs2_stream_profile* to, rs2_extrinsics* extrin, rs2_error** error);
     * }
     */
    public static void rs2_get_extrinsics(MemorySegment from, MemorySegment to, MemorySegment extrin, MemorySegment error) {
        var mh$ = rs2_get_extrinsics$MH();
        try {
            mh$.invokeExact(from, to, extrin, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_register_extrinsics$MH() {
        return RuntimeHelper.requireNonNull(constants$77.rs2_register_extrinsics$MH,"rs2_register_extrinsics");
    }
    /**
     * {@snippet :
     * void rs2_register_extrinsics(const rs2_stream_profile* from, const rs2_stream_profile* to, rs2_extrinsics extrin, rs2_error** error);
     * }
     */
    public static void rs2_register_extrinsics(MemorySegment from, MemorySegment to, MemorySegment extrin, MemorySegment error) {
        var mh$ = rs2_register_extrinsics$MH();
        try {
            mh$.invokeExact(from, to, extrin, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_override_extrinsics$MH() {
        return RuntimeHelper.requireNonNull(constants$77.rs2_override_extrinsics$MH,"rs2_override_extrinsics");
    }
    /**
     * {@snippet :
     * void rs2_override_extrinsics(const rs2_sensor* sensor, const rs2_extrinsics* extrinsics, rs2_error** error);
     * }
     */
    public static void rs2_override_extrinsics(MemorySegment sensor, MemorySegment extrinsics, MemorySegment error) {
        var mh$ = rs2_override_extrinsics$MH();
        try {
            mh$.invokeExact(sensor, extrinsics, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_video_stream_intrinsics$MH() {
        return RuntimeHelper.requireNonNull(constants$77.rs2_get_video_stream_intrinsics$MH,"rs2_get_video_stream_intrinsics");
    }
    /**
     * {@snippet :
     * void rs2_get_video_stream_intrinsics(const rs2_stream_profile* mode, rs2_intrinsics* intrinsics, rs2_error** error);
     * }
     */
    public static void rs2_get_video_stream_intrinsics(MemorySegment mode, MemorySegment intrinsics, MemorySegment error) {
        var mh$ = rs2_get_video_stream_intrinsics$MH();
        try {
            mh$.invokeExact(mode, intrinsics, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_recommended_processing_blocks$MH() {
        return RuntimeHelper.requireNonNull(constants$77.rs2_get_recommended_processing_blocks$MH,"rs2_get_recommended_processing_blocks");
    }
    /**
     * {@snippet :
     * rs2_processing_block_list* rs2_get_recommended_processing_blocks(rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_recommended_processing_blocks(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_get_recommended_processing_blocks$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_processing_block$MH() {
        return RuntimeHelper.requireNonNull(constants$78.rs2_get_processing_block$MH,"rs2_get_processing_block");
    }
    /**
     * {@snippet :
     * rs2_processing_block* rs2_get_processing_block(const rs2_processing_block_list* list, int index, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_processing_block(MemorySegment list, int index, MemorySegment error) {
        var mh$ = rs2_get_processing_block$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(list, index, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_recommended_processing_blocks_count$MH() {
        return RuntimeHelper.requireNonNull(constants$78.rs2_get_recommended_processing_blocks_count$MH,"rs2_get_recommended_processing_blocks_count");
    }
    /**
     * {@snippet :
     * int rs2_get_recommended_processing_blocks_count(const rs2_processing_block_list* list, rs2_error** error);
     * }
     */
    public static int rs2_get_recommended_processing_blocks_count(MemorySegment list, MemorySegment error) {
        var mh$ = rs2_get_recommended_processing_blocks_count$MH();
        try {
            return (int)mh$.invokeExact(list, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_delete_recommended_processing_blocks$MH() {
        return RuntimeHelper.requireNonNull(constants$78.rs2_delete_recommended_processing_blocks$MH,"rs2_delete_recommended_processing_blocks");
    }
    /**
     * {@snippet :
     * void rs2_delete_recommended_processing_blocks(rs2_processing_block_list* list);
     * }
     */
    public static void rs2_delete_recommended_processing_blocks(MemorySegment list) {
        var mh$ = rs2_delete_recommended_processing_blocks$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_import_localization_map$MH() {
        return RuntimeHelper.requireNonNull(constants$78.rs2_import_localization_map$MH,"rs2_import_localization_map");
    }
    /**
     * {@snippet :
     * int rs2_import_localization_map(const rs2_sensor* sensor, unsigned char* lmap_blob, unsigned int blob_size, rs2_error** error);
     * }
     */
    public static int rs2_import_localization_map(MemorySegment sensor, MemorySegment lmap_blob, int blob_size, MemorySegment error) {
        var mh$ = rs2_import_localization_map$MH();
        try {
            return (int)mh$.invokeExact(sensor, lmap_blob, blob_size, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_export_localization_map$MH() {
        return RuntimeHelper.requireNonNull(constants$78.rs2_export_localization_map$MH,"rs2_export_localization_map");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_export_localization_map(const rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_export_localization_map(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_export_localization_map$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_static_node$MH() {
        return RuntimeHelper.requireNonNull(constants$78.rs2_set_static_node$MH,"rs2_set_static_node");
    }
    /**
     * {@snippet :
     * int rs2_set_static_node(const rs2_sensor* sensor, char* guid, const rs2_vector pos, const rs2_quaternion orient, rs2_error** error);
     * }
     */
    public static int rs2_set_static_node(MemorySegment sensor, MemorySegment guid, MemorySegment pos, MemorySegment orient, MemorySegment error) {
        var mh$ = rs2_set_static_node$MH();
        try {
            return (int)mh$.invokeExact(sensor, guid, pos, orient, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_static_node$MH() {
        return RuntimeHelper.requireNonNull(constants$79.rs2_get_static_node$MH,"rs2_get_static_node");
    }
    /**
     * {@snippet :
     * int rs2_get_static_node(const rs2_sensor* sensor, char* guid, rs2_vector* pos, rs2_quaternion* orient, rs2_error** error);
     * }
     */
    public static int rs2_get_static_node(MemorySegment sensor, MemorySegment guid, MemorySegment pos, MemorySegment orient, MemorySegment error) {
        var mh$ = rs2_get_static_node$MH();
        try {
            return (int)mh$.invokeExact(sensor, guid, pos, orient, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_remove_static_node$MH() {
        return RuntimeHelper.requireNonNull(constants$79.rs2_remove_static_node$MH,"rs2_remove_static_node");
    }
    /**
     * {@snippet :
     * int rs2_remove_static_node(const rs2_sensor* sensor, char* guid, rs2_error** error);
     * }
     */
    public static int rs2_remove_static_node(MemorySegment sensor, MemorySegment guid, MemorySegment error) {
        var mh$ = rs2_remove_static_node$MH();
        try {
            return (int)mh$.invokeExact(sensor, guid, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_load_wheel_odometry_config$MH() {
        return RuntimeHelper.requireNonNull(constants$79.rs2_load_wheel_odometry_config$MH,"rs2_load_wheel_odometry_config");
    }
    /**
     * {@snippet :
     * int rs2_load_wheel_odometry_config(const rs2_sensor* sensor, unsigned char* odometry_config_buf, unsigned int blob_size, rs2_error** error);
     * }
     */
    public static int rs2_load_wheel_odometry_config(MemorySegment sensor, MemorySegment odometry_config_buf, int blob_size, MemorySegment error) {
        var mh$ = rs2_load_wheel_odometry_config$MH();
        try {
            return (int)mh$.invokeExact(sensor, odometry_config_buf, blob_size, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_send_wheel_odometry$MH() {
        return RuntimeHelper.requireNonNull(constants$79.rs2_send_wheel_odometry$MH,"rs2_send_wheel_odometry");
    }
    /**
     * {@snippet :
     * int rs2_send_wheel_odometry(const rs2_sensor* sensor, char wo_sensor_id, unsigned int frame_num, const rs2_vector translational_velocity, rs2_error** error);
     * }
     */
    public static int rs2_send_wheel_odometry(MemorySegment sensor, byte wo_sensor_id, int frame_num, MemorySegment translational_velocity, MemorySegment error) {
        var mh$ = rs2_send_wheel_odometry$MH();
        try {
            return (int)mh$.invokeExact(sensor, wo_sensor_id, frame_num, translational_velocity, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_intrinsics$MH() {
        return RuntimeHelper.requireNonNull(constants$79.rs2_set_intrinsics$MH,"rs2_set_intrinsics");
    }
    /**
     * {@snippet :
     * void rs2_set_intrinsics(const rs2_sensor* sensor, const rs2_stream_profile* profile, const rs2_intrinsics* intrinsics, rs2_error** error);
     * }
     */
    public static void rs2_set_intrinsics(MemorySegment sensor, MemorySegment profile, MemorySegment intrinsics, MemorySegment error) {
        var mh$ = rs2_set_intrinsics$MH();
        try {
            mh$.invokeExact(sensor, profile, intrinsics, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_override_intrinsics$MH() {
        return RuntimeHelper.requireNonNull(constants$79.rs2_override_intrinsics$MH,"rs2_override_intrinsics");
    }
    /**
     * {@snippet :
     * void rs2_override_intrinsics(const rs2_sensor* sensor, const rs2_intrinsics* intrinsics, rs2_error** error);
     * }
     */
    public static void rs2_override_intrinsics(MemorySegment sensor, MemorySegment intrinsics, MemorySegment error) {
        var mh$ = rs2_override_intrinsics$MH();
        try {
            mh$.invokeExact(sensor, intrinsics, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_extrinsics$MH() {
        return RuntimeHelper.requireNonNull(constants$80.rs2_set_extrinsics$MH,"rs2_set_extrinsics");
    }
    /**
     * {@snippet :
     * void rs2_set_extrinsics(const rs2_sensor* from_sensor, const rs2_stream_profile* from_profile, rs2_sensor* to_sensor, const rs2_stream_profile* to_profile, const rs2_extrinsics* extrinsics, rs2_error** error);
     * }
     */
    public static void rs2_set_extrinsics(MemorySegment from_sensor, MemorySegment from_profile, MemorySegment to_sensor, MemorySegment to_profile, MemorySegment extrinsics, MemorySegment error) {
        var mh$ = rs2_set_extrinsics$MH();
        try {
            mh$.invokeExact(from_sensor, from_profile, to_sensor, to_profile, extrinsics, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_dsm_params$MH() {
        return RuntimeHelper.requireNonNull(constants$80.rs2_get_dsm_params$MH,"rs2_get_dsm_params");
    }
    /**
     * {@snippet :
     * void rs2_get_dsm_params(const rs2_sensor* sensor, rs2_dsm_params* p_params_out, rs2_error** error);
     * }
     */
    public static void rs2_get_dsm_params(MemorySegment sensor, MemorySegment p_params_out, MemorySegment error) {
        var mh$ = rs2_get_dsm_params$MH();
        try {
            mh$.invokeExact(sensor, p_params_out, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_override_dsm_params$MH() {
        return RuntimeHelper.requireNonNull(constants$80.rs2_override_dsm_params$MH,"rs2_override_dsm_params");
    }
    /**
     * {@snippet :
     * void rs2_override_dsm_params(const rs2_sensor* sensor, const rs2_dsm_params* p_params, rs2_error** error);
     * }
     */
    public static void rs2_override_dsm_params(MemorySegment sensor, MemorySegment p_params, MemorySegment error) {
        var mh$ = rs2_override_dsm_params$MH();
        try {
            mh$.invokeExact(sensor, p_params, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_reset_sensor_calibration$MH() {
        return RuntimeHelper.requireNonNull(constants$80.rs2_reset_sensor_calibration$MH,"rs2_reset_sensor_calibration");
    }
    /**
     * {@snippet :
     * void rs2_reset_sensor_calibration(const rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static void rs2_reset_sensor_calibration(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_reset_sensor_calibration$MH();
        try {
            mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_motion_device_intrinsics$MH() {
        return RuntimeHelper.requireNonNull(constants$80.rs2_set_motion_device_intrinsics$MH,"rs2_set_motion_device_intrinsics");
    }
    /**
     * {@snippet :
     * void rs2_set_motion_device_intrinsics(const rs2_sensor* sensor, const rs2_stream_profile* profile, const rs2_motion_device_intrinsic* intrinsics, rs2_error** error);
     * }
     */
    public static void rs2_set_motion_device_intrinsics(MemorySegment sensor, MemorySegment profile, MemorySegment intrinsics, MemorySegment error) {
        var mh$ = rs2_set_motion_device_intrinsics$MH();
        try {
            mh$.invokeExact(sensor, profile, intrinsics, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_max_usable_depth_range$MH() {
        return RuntimeHelper.requireNonNull(constants$80.rs2_get_max_usable_depth_range$MH,"rs2_get_max_usable_depth_range");
    }
    /**
     * {@snippet :
     * float rs2_get_max_usable_depth_range(const rs2_sensor* sensor, rs2_error** error);
     * }
     */
    public static float rs2_get_max_usable_depth_range(MemorySegment sensor, MemorySegment error) {
        var mh$ = rs2_get_max_usable_depth_range$MH();
        try {
            return (float)mh$.invokeExact(sensor, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_project_point_to_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$81.rs2_project_point_to_pixel$MH,"rs2_project_point_to_pixel");
    }
    /**
     * {@snippet :
     * void rs2_project_point_to_pixel(float pixel[2], const rs2_intrinsics* intrin, float point[3]);
     * }
     */
    public static void rs2_project_point_to_pixel(MemorySegment pixel, MemorySegment intrin, MemorySegment point) {
        var mh$ = rs2_project_point_to_pixel$MH();
        try {
            mh$.invokeExact(pixel, intrin, point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_deproject_pixel_to_point$MH() {
        return RuntimeHelper.requireNonNull(constants$81.rs2_deproject_pixel_to_point$MH,"rs2_deproject_pixel_to_point");
    }
    /**
     * {@snippet :
     * void rs2_deproject_pixel_to_point(float point[3], const rs2_intrinsics* intrin, float pixel[2], float depth);
     * }
     */
    public static void rs2_deproject_pixel_to_point(MemorySegment point, MemorySegment intrin, MemorySegment pixel, float depth) {
        var mh$ = rs2_deproject_pixel_to_point$MH();
        try {
            mh$.invokeExact(point, intrin, pixel, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_transform_point_to_point$MH() {
        return RuntimeHelper.requireNonNull(constants$81.rs2_transform_point_to_point$MH,"rs2_transform_point_to_point");
    }
    /**
     * {@snippet :
     * void rs2_transform_point_to_point(float to_point[3], const rs2_extrinsics* extrin, float from_point[3]);
     * }
     */
    public static void rs2_transform_point_to_point(MemorySegment to_point, MemorySegment extrin, MemorySegment from_point) {
        var mh$ = rs2_transform_point_to_point$MH();
        try {
            mh$.invokeExact(to_point, extrin, from_point);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_fov$MH() {
        return RuntimeHelper.requireNonNull(constants$81.rs2_fov$MH,"rs2_fov");
    }
    /**
     * {@snippet :
     * void rs2_fov(const rs2_intrinsics* intrin, float to_fov[2]);
     * }
     */
    public static void rs2_fov(MemorySegment intrin, MemorySegment to_fov) {
        var mh$ = rs2_fov$MH();
        try {
            mh$.invokeExact(intrin, to_fov);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_project_color_pixel_to_depth_pixel$MH() {
        return RuntimeHelper.requireNonNull(constants$81.rs2_project_color_pixel_to_depth_pixel$MH,"rs2_project_color_pixel_to_depth_pixel");
    }
    /**
     * {@snippet :
     * void rs2_project_color_pixel_to_depth_pixel(float to_pixel[2], const uint16_t* data, float depth_scale, float depth_min, float depth_max, struct rs2_intrinsics* depth_intrin, struct rs2_intrinsics* color_intrin, struct rs2_extrinsics* color_to_depth, struct rs2_extrinsics* depth_to_color, float from_pixel[2]);
     * }
     */
    public static void rs2_project_color_pixel_to_depth_pixel(MemorySegment to_pixel, MemorySegment data, float depth_scale, float depth_min, float depth_max, MemorySegment depth_intrin, MemorySegment color_intrin, MemorySegment color_to_depth, MemorySegment depth_to_color, MemorySegment from_pixel) {
        var mh$ = rs2_project_color_pixel_to_depth_pixel$MH();
        try {
            mh$.invokeExact(to_pixel, data, depth_scale, depth_min, depth_max, depth_intrin, color_intrin, color_to_depth, depth_to_color, from_pixel);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_create_context$MH() {
        return RuntimeHelper.requireNonNull(constants$81.rs2_create_context$MH,"rs2_create_context");
    }
    /**
     * {@snippet :
     * rs2_context* rs2_create_context(int api_version, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_create_context(int api_version, MemorySegment error) {
        var mh$ = rs2_create_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(api_version, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_delete_context$MH() {
        return RuntimeHelper.requireNonNull(constants$82.rs2_delete_context$MH,"rs2_delete_context");
    }
    /**
     * {@snippet :
     * void rs2_delete_context(rs2_context* context);
     * }
     */
    public static void rs2_delete_context(MemorySegment context) {
        var mh$ = rs2_delete_context$MH();
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_devices_changed_callback_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$82.rs2_set_devices_changed_callback_cpp$MH,"rs2_set_devices_changed_callback_cpp");
    }
    /**
     * {@snippet :
     * void rs2_set_devices_changed_callback_cpp(rs2_context* context, rs2_devices_changed_callback* callback, rs2_error** error);
     * }
     */
    public static void rs2_set_devices_changed_callback_cpp(MemorySegment context, MemorySegment callback, MemorySegment error) {
        var mh$ = rs2_set_devices_changed_callback_cpp$MH();
        try {
            mh$.invokeExact(context, callback, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_devices_changed_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$82.rs2_set_devices_changed_callback$MH,"rs2_set_devices_changed_callback");
    }
    /**
     * {@snippet :
     * void rs2_set_devices_changed_callback(const rs2_context* context, rs2_devices_changed_callback_ptr callback, void* user, rs2_error** error);
     * }
     */
    public static void rs2_set_devices_changed_callback(MemorySegment context, MemorySegment callback, MemorySegment user, MemorySegment error) {
        var mh$ = rs2_set_devices_changed_callback$MH();
        try {
            mh$.invokeExact(context, callback, user, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_context_add_device$MH() {
        return RuntimeHelper.requireNonNull(constants$82.rs2_context_add_device$MH,"rs2_context_add_device");
    }
    /**
     * {@snippet :
     * rs2_device* rs2_context_add_device(rs2_context* ctx, char* file, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_context_add_device(MemorySegment ctx, MemorySegment file, MemorySegment error) {
        var mh$ = rs2_context_add_device$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ctx, file, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_context_add_software_device$MH() {
        return RuntimeHelper.requireNonNull(constants$82.rs2_context_add_software_device$MH,"rs2_context_add_software_device");
    }
    /**
     * {@snippet :
     * void rs2_context_add_software_device(rs2_context* ctx, rs2_device* dev, rs2_error** error);
     * }
     */
    public static void rs2_context_add_software_device(MemorySegment ctx, MemorySegment dev, MemorySegment error) {
        var mh$ = rs2_context_add_software_device$MH();
        try {
            mh$.invokeExact(ctx, dev, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_context_remove_device$MH() {
        return RuntimeHelper.requireNonNull(constants$82.rs2_context_remove_device$MH,"rs2_context_remove_device");
    }
    /**
     * {@snippet :
     * void rs2_context_remove_device(rs2_context* ctx, char* file, rs2_error** error);
     * }
     */
    public static void rs2_context_remove_device(MemorySegment ctx, MemorySegment file, MemorySegment error) {
        var mh$ = rs2_context_remove_device$MH();
        try {
            mh$.invokeExact(ctx, file, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_context_unload_tracking_module$MH() {
        return RuntimeHelper.requireNonNull(constants$83.rs2_context_unload_tracking_module$MH,"rs2_context_unload_tracking_module");
    }
    /**
     * {@snippet :
     * void rs2_context_unload_tracking_module(rs2_context* ctx, rs2_error** error);
     * }
     */
    public static void rs2_context_unload_tracking_module(MemorySegment ctx, MemorySegment error) {
        var mh$ = rs2_context_unload_tracking_module$MH();
        try {
            mh$.invokeExact(ctx, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_query_devices$MH() {
        return RuntimeHelper.requireNonNull(constants$83.rs2_query_devices$MH,"rs2_query_devices");
    }
    /**
     * {@snippet :
     * rs2_device_list* rs2_query_devices(const rs2_context* context, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_query_devices(MemorySegment context, MemorySegment error) {
        var mh$ = rs2_query_devices$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_query_devices_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$83.rs2_query_devices_ex$MH,"rs2_query_devices_ex");
    }
    /**
     * {@snippet :
     * rs2_device_list* rs2_query_devices_ex(const rs2_context* context, int product_mask, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_query_devices_ex(MemorySegment context, int product_mask, MemorySegment error) {
        var mh$ = rs2_query_devices_ex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, product_mask, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_create_device_hub$MH() {
        return RuntimeHelper.requireNonNull(constants$83.rs2_create_device_hub$MH,"rs2_create_device_hub");
    }
    /**
     * {@snippet :
     * rs2_device_hub* rs2_create_device_hub(const rs2_context* context, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_create_device_hub(MemorySegment context, MemorySegment error) {
        var mh$ = rs2_create_device_hub$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_delete_device_hub$MH() {
        return RuntimeHelper.requireNonNull(constants$83.rs2_delete_device_hub$MH,"rs2_delete_device_hub");
    }
    /**
     * {@snippet :
     * void rs2_delete_device_hub(const rs2_device_hub* hub);
     * }
     */
    public static void rs2_delete_device_hub(MemorySegment hub) {
        var mh$ = rs2_delete_device_hub$MH();
        try {
            mh$.invokeExact(hub);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_device_hub_wait_for_device$MH() {
        return RuntimeHelper.requireNonNull(constants$83.rs2_device_hub_wait_for_device$MH,"rs2_device_hub_wait_for_device");
    }
    /**
     * {@snippet :
     * rs2_device* rs2_device_hub_wait_for_device(const rs2_device_hub* hub, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_device_hub_wait_for_device(MemorySegment hub, MemorySegment error) {
        var mh$ = rs2_device_hub_wait_for_device$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(hub, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_device_hub_is_device_connected$MH() {
        return RuntimeHelper.requireNonNull(constants$84.rs2_device_hub_is_device_connected$MH,"rs2_device_hub_is_device_connected");
    }
    /**
     * {@snippet :
     * int rs2_device_hub_is_device_connected(const rs2_device_hub* hub, const rs2_device* device, rs2_error** error);
     * }
     */
    public static int rs2_device_hub_is_device_connected(MemorySegment hub, MemorySegment device, MemorySegment error) {
        var mh$ = rs2_device_hub_is_device_connected$MH();
        try {
            return (int)mh$.invokeExact(hub, device, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_device_count$MH() {
        return RuntimeHelper.requireNonNull(constants$84.rs2_get_device_count$MH,"rs2_get_device_count");
    }
    /**
     * {@snippet :
     * int rs2_get_device_count(const rs2_device_list* info_list, rs2_error** error);
     * }
     */
    public static int rs2_get_device_count(MemorySegment info_list, MemorySegment error) {
        var mh$ = rs2_get_device_count$MH();
        try {
            return (int)mh$.invokeExact(info_list, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_delete_device_list$MH() {
        return RuntimeHelper.requireNonNull(constants$84.rs2_delete_device_list$MH,"rs2_delete_device_list");
    }
    /**
     * {@snippet :
     * void rs2_delete_device_list(rs2_device_list* info_list);
     * }
     */
    public static void rs2_delete_device_list(MemorySegment info_list) {
        var mh$ = rs2_delete_device_list$MH();
        try {
            mh$.invokeExact(info_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_device_list_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$84.rs2_device_list_contains$MH,"rs2_device_list_contains");
    }
    /**
     * {@snippet :
     * int rs2_device_list_contains(const rs2_device_list* info_list, const rs2_device* device, rs2_error** error);
     * }
     */
    public static int rs2_device_list_contains(MemorySegment info_list, MemorySegment device, MemorySegment error) {
        var mh$ = rs2_device_list_contains$MH();
        try {
            return (int)mh$.invokeExact(info_list, device, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_create_device$MH() {
        return RuntimeHelper.requireNonNull(constants$84.rs2_create_device$MH,"rs2_create_device");
    }
    /**
     * {@snippet :
     * rs2_device* rs2_create_device(const rs2_device_list* info_list, int index, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_create_device(MemorySegment info_list, int index, MemorySegment error) {
        var mh$ = rs2_create_device$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(info_list, index, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_delete_device$MH() {
        return RuntimeHelper.requireNonNull(constants$84.rs2_delete_device$MH,"rs2_delete_device");
    }
    /**
     * {@snippet :
     * void rs2_delete_device(rs2_device* device);
     * }
     */
    public static void rs2_delete_device(MemorySegment device) {
        var mh$ = rs2_delete_device$MH();
        try {
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_device_info$MH() {
        return RuntimeHelper.requireNonNull(constants$85.rs2_get_device_info$MH,"rs2_get_device_info");
    }
    /**
     * {@snippet :
     * char* rs2_get_device_info(const rs2_device* device, rs2_camera_info info, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_device_info(MemorySegment device, int info, MemorySegment error) {
        var mh$ = rs2_get_device_info$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_supports_device_info$MH() {
        return RuntimeHelper.requireNonNull(constants$85.rs2_supports_device_info$MH,"rs2_supports_device_info");
    }
    /**
     * {@snippet :
     * int rs2_supports_device_info(const rs2_device* device, rs2_camera_info info, rs2_error** error);
     * }
     */
    public static int rs2_supports_device_info(MemorySegment device, int info, MemorySegment error) {
        var mh$ = rs2_supports_device_info$MH();
        try {
            return (int)mh$.invokeExact(device, info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_hardware_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$85.rs2_hardware_reset$MH,"rs2_hardware_reset");
    }
    /**
     * {@snippet :
     * void rs2_hardware_reset(const rs2_device* device, rs2_error** error);
     * }
     */
    public static void rs2_hardware_reset(MemorySegment device, MemorySegment error) {
        var mh$ = rs2_hardware_reset$MH();
        try {
            mh$.invokeExact(device, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_build_debug_protocol_command$MH() {
        return RuntimeHelper.requireNonNull(constants$85.rs2_build_debug_protocol_command$MH,"rs2_build_debug_protocol_command");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_build_debug_protocol_command(rs2_device* device, unsigned int opcode, unsigned int param1, unsigned int param2, unsigned int param3, unsigned int param4, void* data, unsigned int size_of_data, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_build_debug_protocol_command(MemorySegment device, int opcode, int param1, int param2, int param3, int param4, MemorySegment data, int size_of_data, MemorySegment error) {
        var mh$ = rs2_build_debug_protocol_command$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, opcode, param1, param2, param3, param4, data, size_of_data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_send_and_receive_raw_data$MH() {
        return RuntimeHelper.requireNonNull(constants$85.rs2_send_and_receive_raw_data$MH,"rs2_send_and_receive_raw_data");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_send_and_receive_raw_data(rs2_device* device, void* raw_data_to_send, unsigned int size_of_raw_data_to_send, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_send_and_receive_raw_data(MemorySegment device, MemorySegment raw_data_to_send, int size_of_raw_data_to_send, MemorySegment error) {
        var mh$ = rs2_send_and_receive_raw_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, raw_data_to_send, size_of_raw_data_to_send, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_is_device_extendable_to$MH() {
        return RuntimeHelper.requireNonNull(constants$85.rs2_is_device_extendable_to$MH,"rs2_is_device_extendable_to");
    }
    /**
     * {@snippet :
     * int rs2_is_device_extendable_to(const rs2_device* device, rs2_extension extension, rs2_error** error);
     * }
     */
    public static int rs2_is_device_extendable_to(MemorySegment device, int extension, MemorySegment error) {
        var mh$ = rs2_is_device_extendable_to$MH();
        try {
            return (int)mh$.invokeExact(device, extension, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_query_sensors$MH() {
        return RuntimeHelper.requireNonNull(constants$86.rs2_query_sensors$MH,"rs2_query_sensors");
    }
    /**
     * {@snippet :
     * rs2_sensor_list* rs2_query_sensors(const rs2_device* device, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_query_sensors(MemorySegment device, MemorySegment error) {
        var mh$ = rs2_query_sensors$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_loopback_enable$MH() {
        return RuntimeHelper.requireNonNull(constants$86.rs2_loopback_enable$MH,"rs2_loopback_enable");
    }
    /**
     * {@snippet :
     * void rs2_loopback_enable(const rs2_device* device, char* from_file, rs2_error** error);
     * }
     */
    public static void rs2_loopback_enable(MemorySegment device, MemorySegment from_file, MemorySegment error) {
        var mh$ = rs2_loopback_enable$MH();
        try {
            mh$.invokeExact(device, from_file, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_loopback_disable$MH() {
        return RuntimeHelper.requireNonNull(constants$86.rs2_loopback_disable$MH,"rs2_loopback_disable");
    }
    /**
     * {@snippet :
     * void rs2_loopback_disable(const rs2_device* device, rs2_error** error);
     * }
     */
    public static void rs2_loopback_disable(MemorySegment device, MemorySegment error) {
        var mh$ = rs2_loopback_disable$MH();
        try {
            mh$.invokeExact(device, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_loopback_is_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$86.rs2_loopback_is_enabled$MH,"rs2_loopback_is_enabled");
    }
    /**
     * {@snippet :
     * int rs2_loopback_is_enabled(const rs2_device* device, rs2_error** error);
     * }
     */
    public static int rs2_loopback_is_enabled(MemorySegment device, MemorySegment error) {
        var mh$ = rs2_loopback_is_enabled$MH();
        try {
            return (int)mh$.invokeExact(device, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_connect_tm2_controller$MH() {
        return RuntimeHelper.requireNonNull(constants$86.rs2_connect_tm2_controller$MH,"rs2_connect_tm2_controller");
    }
    /**
     * {@snippet :
     * void rs2_connect_tm2_controller(const rs2_device* device, unsigned char* mac_addr, rs2_error** error);
     * }
     */
    public static void rs2_connect_tm2_controller(MemorySegment device, MemorySegment mac_addr, MemorySegment error) {
        var mh$ = rs2_connect_tm2_controller$MH();
        try {
            mh$.invokeExact(device, mac_addr, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_disconnect_tm2_controller$MH() {
        return RuntimeHelper.requireNonNull(constants$86.rs2_disconnect_tm2_controller$MH,"rs2_disconnect_tm2_controller");
    }
    /**
     * {@snippet :
     * void rs2_disconnect_tm2_controller(const rs2_device* device, int id, rs2_error** error);
     * }
     */
    public static void rs2_disconnect_tm2_controller(MemorySegment device, int id, MemorySegment error) {
        var mh$ = rs2_disconnect_tm2_controller$MH();
        try {
            mh$.invokeExact(device, id, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_reset_to_factory_calibration$MH() {
        return RuntimeHelper.requireNonNull(constants$87.rs2_reset_to_factory_calibration$MH,"rs2_reset_to_factory_calibration");
    }
    /**
     * {@snippet :
     * void rs2_reset_to_factory_calibration(const rs2_device* device, rs2_error** e);
     * }
     */
    public static void rs2_reset_to_factory_calibration(MemorySegment device, MemorySegment e) {
        var mh$ = rs2_reset_to_factory_calibration$MH();
        try {
            mh$.invokeExact(device, e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_write_calibration$MH() {
        return RuntimeHelper.requireNonNull(constants$87.rs2_write_calibration$MH,"rs2_write_calibration");
    }
    /**
     * {@snippet :
     * void rs2_write_calibration(const rs2_device* device, rs2_error** e);
     * }
     */
    public static void rs2_write_calibration(MemorySegment device, MemorySegment e) {
        var mh$ = rs2_write_calibration$MH();
        try {
            mh$.invokeExact(device, e);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_update_firmware_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$87.rs2_update_firmware_cpp$MH,"rs2_update_firmware_cpp");
    }
    /**
     * {@snippet :
     * void rs2_update_firmware_cpp(const rs2_device* device, void* fw_image, int fw_image_size, rs2_update_progress_callback* callback, rs2_error** error);
     * }
     */
    public static void rs2_update_firmware_cpp(MemorySegment device, MemorySegment fw_image, int fw_image_size, MemorySegment callback, MemorySegment error) {
        var mh$ = rs2_update_firmware_cpp$MH();
        try {
            mh$.invokeExact(device, fw_image, fw_image_size, callback, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_update_firmware$MH() {
        return RuntimeHelper.requireNonNull(constants$87.rs2_update_firmware$MH,"rs2_update_firmware");
    }
    /**
     * {@snippet :
     * void rs2_update_firmware(const rs2_device* device, void* fw_image, int fw_image_size, rs2_update_progress_callback_ptr callback, void* client_data, rs2_error** error);
     * }
     */
    public static void rs2_update_firmware(MemorySegment device, MemorySegment fw_image, int fw_image_size, MemorySegment callback, MemorySegment client_data, MemorySegment error) {
        var mh$ = rs2_update_firmware$MH();
        try {
            mh$.invokeExact(device, fw_image, fw_image_size, callback, client_data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_create_flash_backup_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$87.rs2_create_flash_backup_cpp$MH,"rs2_create_flash_backup_cpp");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_create_flash_backup_cpp(const rs2_device* device, rs2_update_progress_callback* callback, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_create_flash_backup_cpp(MemorySegment device, MemorySegment callback, MemorySegment error) {
        var mh$ = rs2_create_flash_backup_cpp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, callback, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_create_flash_backup$MH() {
        return RuntimeHelper.requireNonNull(constants$87.rs2_create_flash_backup$MH,"rs2_create_flash_backup");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_create_flash_backup(const rs2_device* device, rs2_update_progress_callback_ptr callback, void* client_data, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_create_flash_backup(MemorySegment device, MemorySegment callback, MemorySegment client_data, MemorySegment error) {
        var mh$ = rs2_create_flash_backup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, callback, client_data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_update_firmware_unsigned_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$88.rs2_update_firmware_unsigned_cpp$MH,"rs2_update_firmware_unsigned_cpp");
    }
    /**
     * {@snippet :
     * void rs2_update_firmware_unsigned_cpp(const rs2_device* device, void* fw_image, int fw_image_size, rs2_update_progress_callback* callback, int update_mode, rs2_error** error);
     * }
     */
    public static void rs2_update_firmware_unsigned_cpp(MemorySegment device, MemorySegment fw_image, int fw_image_size, MemorySegment callback, int update_mode, MemorySegment error) {
        var mh$ = rs2_update_firmware_unsigned_cpp$MH();
        try {
            mh$.invokeExact(device, fw_image, fw_image_size, callback, update_mode, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_check_firmware_compatibility$MH() {
        return RuntimeHelper.requireNonNull(constants$88.rs2_check_firmware_compatibility$MH,"rs2_check_firmware_compatibility");
    }
    /**
     * {@snippet :
     * int rs2_check_firmware_compatibility(const rs2_device* device, void* fw_image, int fw_image_size, rs2_error** error);
     * }
     */
    public static int rs2_check_firmware_compatibility(MemorySegment device, MemorySegment fw_image, int fw_image_size, MemorySegment error) {
        var mh$ = rs2_check_firmware_compatibility$MH();
        try {
            return (int)mh$.invokeExact(device, fw_image, fw_image_size, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_update_firmware_unsigned$MH() {
        return RuntimeHelper.requireNonNull(constants$88.rs2_update_firmware_unsigned$MH,"rs2_update_firmware_unsigned");
    }
    /**
     * {@snippet :
     * void rs2_update_firmware_unsigned(const rs2_device* device, void* fw_image, int fw_image_size, rs2_update_progress_callback_ptr callback, void* client_data, int update_mode, rs2_error** error);
     * }
     */
    public static void rs2_update_firmware_unsigned(MemorySegment device, MemorySegment fw_image, int fw_image_size, MemorySegment callback, MemorySegment client_data, int update_mode, MemorySegment error) {
        var mh$ = rs2_update_firmware_unsigned$MH();
        try {
            mh$.invokeExact(device, fw_image, fw_image_size, callback, client_data, update_mode, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_enter_update_state$MH() {
        return RuntimeHelper.requireNonNull(constants$88.rs2_enter_update_state$MH,"rs2_enter_update_state");
    }
    /**
     * {@snippet :
     * void rs2_enter_update_state(const rs2_device* device, rs2_error** error);
     * }
     */
    public static void rs2_enter_update_state(MemorySegment device, MemorySegment error) {
        var mh$ = rs2_enter_update_state$MH();
        try {
            mh$.invokeExact(device, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_run_on_chip_calibration_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$88.rs2_run_on_chip_calibration_cpp$MH,"rs2_run_on_chip_calibration_cpp");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_run_on_chip_calibration_cpp(rs2_device* device, void* json_content, int content_size, float* health, rs2_update_progress_callback* progress_callback, int timeout_ms, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_run_on_chip_calibration_cpp(MemorySegment device, MemorySegment json_content, int content_size, MemorySegment health, MemorySegment progress_callback, int timeout_ms, MemorySegment error) {
        var mh$ = rs2_run_on_chip_calibration_cpp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, json_content, content_size, health, progress_callback, timeout_ms, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_run_on_chip_calibration$MH() {
        return RuntimeHelper.requireNonNull(constants$88.rs2_run_on_chip_calibration$MH,"rs2_run_on_chip_calibration");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_run_on_chip_calibration(rs2_device* device, void* json_content, int content_size, float* health, rs2_update_progress_callback_ptr callback, void* client_data, int timeout_ms, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_run_on_chip_calibration(MemorySegment device, MemorySegment json_content, int content_size, MemorySegment health, MemorySegment callback, MemorySegment client_data, int timeout_ms, MemorySegment error) {
        var mh$ = rs2_run_on_chip_calibration$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, json_content, content_size, health, callback, client_data, timeout_ms, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_run_tare_calibration_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$89.rs2_run_tare_calibration_cpp$MH,"rs2_run_tare_calibration_cpp");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_run_tare_calibration_cpp(rs2_device* dev, float ground_truth_mm, void* json_content, int content_size, float* health, rs2_update_progress_callback* progress_callback, int timeout_ms, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_run_tare_calibration_cpp(MemorySegment dev, float ground_truth_mm, MemorySegment json_content, int content_size, MemorySegment health, MemorySegment progress_callback, int timeout_ms, MemorySegment error) {
        var mh$ = rs2_run_tare_calibration_cpp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dev, ground_truth_mm, json_content, content_size, health, progress_callback, timeout_ms, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_process_calibration_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$89.rs2_process_calibration_frame$MH,"rs2_process_calibration_frame");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_process_calibration_frame(rs2_device* dev, const rs2_frame* f, float* health, rs2_update_progress_callback* progress_callback, int timeout_ms, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_process_calibration_frame(MemorySegment dev, MemorySegment f, MemorySegment health, MemorySegment progress_callback, int timeout_ms, MemorySegment error) {
        var mh$ = rs2_process_calibration_frame$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dev, f, health, progress_callback, timeout_ms, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_calibration_type.RS2_CALIBRATION_AUTO_DEPTH_TO_RGB = 0;
     * }
     */
    public static int RS2_CALIBRATION_AUTO_DEPTH_TO_RGB() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_type.RS2_CALIBRATION_MANUAL_DEPTH_TO_RGB = 1;
     * }
     */
    public static int RS2_CALIBRATION_MANUAL_DEPTH_TO_RGB() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_type.RS2_CALIBRATION_THERMAL = 2;
     * }
     */
    public static int RS2_CALIBRATION_THERMAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_type.RS2_CALIBRATION_TYPE_COUNT = 3;
     * }
     */
    public static int RS2_CALIBRATION_TYPE_COUNT() {
        return (int)3L;
    }
    public static MethodHandle rs2_calibration_type_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$89.rs2_calibration_type_to_string$MH,"rs2_calibration_type_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_calibration_type_to_string(rs2_calibration_type);
     * }
     */
    public static MemorySegment rs2_calibration_type_to_string(int x0) {
        var mh$ = rs2_calibration_type_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_TRIGGERED = 0;
     * }
     */
    public static int RS2_CALIBRATION_TRIGGERED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_SPECIAL_FRAME = 1;
     * }
     */
    public static int RS2_CALIBRATION_SPECIAL_FRAME() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_STARTED = 2;
     * }
     */
    public static int RS2_CALIBRATION_STARTED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_NOT_NEEDED = 3;
     * }
     */
    public static int RS2_CALIBRATION_NOT_NEEDED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_SUCCESSFUL = 4;
     * }
     */
    public static int RS2_CALIBRATION_SUCCESSFUL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_RETRY = -1;
     * }
     */
    public static int RS2_CALIBRATION_RETRY() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_FAILED = -2;
     * }
     */
    public static int RS2_CALIBRATION_FAILED() {
        return (int)-2L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_SCENE_INVALID = -3;
     * }
     */
    public static int RS2_CALIBRATION_SCENE_INVALID() {
        return (int)-3L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_BAD_RESULT = -4;
     * }
     */
    public static int RS2_CALIBRATION_BAD_RESULT() {
        return (int)-4L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_BAD_CONDITIONS = -5;
     * }
     */
    public static int RS2_CALIBRATION_BAD_CONDITIONS() {
        return (int)-5L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_STATUS_FIRST = -5;
     * }
     */
    public static int RS2_CALIBRATION_STATUS_FIRST() {
        return (int)-5L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_STATUS_LAST = 4;
     * }
     */
    public static int RS2_CALIBRATION_STATUS_LAST() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum rs2_calibration_status.RS2_CALIBRATION_STATUS_COUNT = 10;
     * }
     */
    public static int RS2_CALIBRATION_STATUS_COUNT() {
        return (int)10L;
    }
    public static MethodHandle rs2_calibration_status_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$89.rs2_calibration_status_to_string$MH,"rs2_calibration_status_to_string");
    }
    /**
     * {@snippet :
     * char* rs2_calibration_status_to_string(rs2_calibration_status);
     * }
     */
    public static MemorySegment rs2_calibration_status_to_string(int x0) {
        var mh$ = rs2_calibration_status_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_register_calibration_change_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$90.rs2_register_calibration_change_callback$MH,"rs2_register_calibration_change_callback");
    }
    /**
     * {@snippet :
     * void rs2_register_calibration_change_callback(rs2_device* dev, rs2_calibration_change_callback_ptr callback, void* user, rs2_error** error);
     * }
     */
    public static void rs2_register_calibration_change_callback(MemorySegment dev, MemorySegment callback, MemorySegment user, MemorySegment error) {
        var mh$ = rs2_register_calibration_change_callback$MH();
        try {
            mh$.invokeExact(dev, callback, user, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_register_calibration_change_callback_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$90.rs2_register_calibration_change_callback_cpp$MH,"rs2_register_calibration_change_callback_cpp");
    }
    /**
     * {@snippet :
     * void rs2_register_calibration_change_callback_cpp(rs2_device* dev, rs2_calibration_change_callback* callback, rs2_error** error);
     * }
     */
    public static void rs2_register_calibration_change_callback_cpp(MemorySegment dev, MemorySegment callback, MemorySegment error) {
        var mh$ = rs2_register_calibration_change_callback_cpp$MH();
        try {
            mh$.invokeExact(dev, callback, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_trigger_device_calibration$MH() {
        return RuntimeHelper.requireNonNull(constants$90.rs2_trigger_device_calibration$MH,"rs2_trigger_device_calibration");
    }
    /**
     * {@snippet :
     * void rs2_trigger_device_calibration(rs2_device* dev, rs2_calibration_type type, rs2_error** error);
     * }
     */
    public static void rs2_trigger_device_calibration(MemorySegment dev, int type, MemorySegment error) {
        var mh$ = rs2_trigger_device_calibration$MH();
        try {
            mh$.invokeExact(dev, type, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_run_tare_calibration$MH() {
        return RuntimeHelper.requireNonNull(constants$90.rs2_run_tare_calibration$MH,"rs2_run_tare_calibration");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_run_tare_calibration(rs2_device* dev, float ground_truth_mm, void* json_content, int content_size, float* health, rs2_update_progress_callback_ptr callback, void* client_data, int timeout_ms, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_run_tare_calibration(MemorySegment dev, float ground_truth_mm, MemorySegment json_content, int content_size, MemorySegment health, MemorySegment callback, MemorySegment client_data, int timeout_ms, MemorySegment error) {
        var mh$ = rs2_run_tare_calibration$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dev, ground_truth_mm, json_content, content_size, health, callback, client_data, timeout_ms, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_get_calibration_table$MH() {
        return RuntimeHelper.requireNonNull(constants$90.rs2_get_calibration_table$MH,"rs2_get_calibration_table");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_get_calibration_table(const rs2_device* dev, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_get_calibration_table(MemorySegment dev, MemorySegment error) {
        var mh$ = rs2_get_calibration_table$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dev, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_set_calibration_table$MH() {
        return RuntimeHelper.requireNonNull(constants$90.rs2_set_calibration_table$MH,"rs2_set_calibration_table");
    }
    /**
     * {@snippet :
     * void rs2_set_calibration_table(const rs2_device* device, void* calibration, int calibration_size, rs2_error** error);
     * }
     */
    public static void rs2_set_calibration_table(MemorySegment device, MemorySegment calibration, int calibration_size, MemorySegment error) {
        var mh$ = rs2_set_calibration_table$MH();
        try {
            mh$.invokeExact(device, calibration, calibration_size, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_serialize_json$MH() {
        return RuntimeHelper.requireNonNull(constants$91.rs2_serialize_json$MH,"rs2_serialize_json");
    }
    /**
     * {@snippet :
     * rs2_raw_data_buffer* rs2_serialize_json(rs2_device* dev, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_serialize_json(MemorySegment dev, MemorySegment error) {
        var mh$ = rs2_serialize_json$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dev, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_load_json$MH() {
        return RuntimeHelper.requireNonNull(constants$91.rs2_load_json$MH,"rs2_load_json");
    }
    /**
     * {@snippet :
     * void rs2_load_json(rs2_device* dev, void* json_content, unsigned int content_size, rs2_error** error);
     * }
     */
    public static void rs2_load_json(MemorySegment dev, MemorySegment json_content, int content_size, MemorySegment error) {
        var mh$ = rs2_load_json$MH();
        try {
            mh$.invokeExact(dev, json_content, content_size, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_run_focal_length_calibration_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$91.rs2_run_focal_length_calibration_cpp$MH,"rs2_run_focal_length_calibration_cpp");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_run_focal_length_calibration_cpp(rs2_device* device, rs2_frame_queue* left_queue, rs2_frame_queue* right_queue, float target_width, float target_height, int adjust_both_sides, float* ratio, float* angle, rs2_update_progress_callback* progress_callback, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_run_focal_length_calibration_cpp(MemorySegment device, MemorySegment left_queue, MemorySegment right_queue, float target_width, float target_height, int adjust_both_sides, MemorySegment ratio, MemorySegment angle, MemorySegment progress_callback, MemorySegment error) {
        var mh$ = rs2_run_focal_length_calibration_cpp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, left_queue, right_queue, target_width, target_height, adjust_both_sides, ratio, angle, progress_callback, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_run_focal_length_calibration$MH() {
        return RuntimeHelper.requireNonNull(constants$91.rs2_run_focal_length_calibration$MH,"rs2_run_focal_length_calibration");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_run_focal_length_calibration(rs2_device* device, rs2_frame_queue* left_queue, rs2_frame_queue* right_queue, float target_width, float target_height, int adjust_both_sides, float* ratio, float* angle, rs2_update_progress_callback_ptr callback, void* client_data, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_run_focal_length_calibration(MemorySegment device, MemorySegment left_queue, MemorySegment right_queue, float target_width, float target_height, int adjust_both_sides, MemorySegment ratio, MemorySegment angle, MemorySegment callback, MemorySegment client_data, MemorySegment error) {
        var mh$ = rs2_run_focal_length_calibration$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, left_queue, right_queue, target_width, target_height, adjust_both_sides, ratio, angle, callback, client_data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_run_uv_map_calibration_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$91.rs2_run_uv_map_calibration_cpp$MH,"rs2_run_uv_map_calibration_cpp");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_run_uv_map_calibration_cpp(rs2_device* device, rs2_frame_queue* left_queue, rs2_frame_queue* color_queue, rs2_frame_queue* depth_queue, int py_px_only, float* health, int health_size, rs2_update_progress_callback* progress_callback, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_run_uv_map_calibration_cpp(MemorySegment device, MemorySegment left_queue, MemorySegment color_queue, MemorySegment depth_queue, int py_px_only, MemorySegment health, int health_size, MemorySegment progress_callback, MemorySegment error) {
        var mh$ = rs2_run_uv_map_calibration_cpp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, left_queue, color_queue, depth_queue, py_px_only, health, health_size, progress_callback, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_run_uv_map_calibration$MH() {
        return RuntimeHelper.requireNonNull(constants$91.rs2_run_uv_map_calibration$MH,"rs2_run_uv_map_calibration");
    }
    /**
     * {@snippet :
     * const rs2_raw_data_buffer* rs2_run_uv_map_calibration(rs2_device* device, rs2_frame_queue* left_queue, rs2_frame_queue* color_queue, rs2_frame_queue* depth_queue, int py_px_only, float* health, int health_size, rs2_update_progress_callback_ptr callback, void* client_data, rs2_error** error);
     * }
     */
    public static MemorySegment rs2_run_uv_map_calibration(MemorySegment device, MemorySegment left_queue, MemorySegment color_queue, MemorySegment depth_queue, int py_px_only, MemorySegment health, int health_size, MemorySegment callback, MemorySegment client_data, MemorySegment error) {
        var mh$ = rs2_run_uv_map_calibration$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(device, left_queue, color_queue, depth_queue, py_px_only, health, health_size, callback, client_data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_calculate_target_z_cpp$MH() {
        return RuntimeHelper.requireNonNull(constants$92.rs2_calculate_target_z_cpp$MH,"rs2_calculate_target_z_cpp");
    }
    /**
     * {@snippet :
     * float rs2_calculate_target_z_cpp(rs2_device* device, rs2_frame_queue* queue1, rs2_frame_queue* queue2, rs2_frame_queue* queue3, float target_width, float target_height, rs2_update_progress_callback* callback, rs2_error** error);
     * }
     */
    public static float rs2_calculate_target_z_cpp(MemorySegment device, MemorySegment queue1, MemorySegment queue2, MemorySegment queue3, float target_width, float target_height, MemorySegment callback, MemorySegment error) {
        var mh$ = rs2_calculate_target_z_cpp$MH();
        try {
            return (float)mh$.invokeExact(device, queue1, queue2, queue3, target_width, target_height, callback, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rs2_calculate_target_z$MH() {
        return RuntimeHelper.requireNonNull(constants$92.rs2_calculate_target_z$MH,"rs2_calculate_target_z");
    }
    /**
     * {@snippet :
     * float rs2_calculate_target_z(rs2_device* device, rs2_frame_queue* queue1, rs2_frame_queue* queue2, rs2_frame_queue* queue3, float target_width, float target_height, rs2_update_progress_callback_ptr progress_callback, void* client_data, rs2_error** error);
     * }
     */
    public static float rs2_calculate_target_z(MemorySegment device, MemorySegment queue1, MemorySegment queue2, MemorySegment queue3, float target_width, float target_height, MemorySegment progress_callback, MemorySegment client_data, MemorySegment error) {
        var mh$ = rs2_calculate_target_z$MH();
        try {
            return (float)mh$.invokeExact(device, queue1, queue2, queue3, target_width, target_height, progress_callback, client_data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


