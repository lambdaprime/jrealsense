// Generated by jextract

package id.jrealsense.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$30 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$30() {}
    static final FunctionDescriptor __copysign$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __copysign$MH = RuntimeHelper.downcallHandle(
        "__copysign",
        constants$30.__copysign$FUNC
    );
    static final FunctionDescriptor nan$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle nan$MH = RuntimeHelper.downcallHandle(
        "nan",
        constants$30.nan$FUNC
    );
    static final FunctionDescriptor __nan$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle __nan$MH = RuntimeHelper.downcallHandle(
        "__nan",
        constants$30.__nan$FUNC
    );
    static final FunctionDescriptor isnan$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle isnan$MH = RuntimeHelper.downcallHandle(
        "isnan",
        constants$30.isnan$FUNC
    );
    static final FunctionDescriptor j0$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle j0$MH = RuntimeHelper.downcallHandle(
        "j0",
        constants$30.j0$FUNC
    );
    static final FunctionDescriptor __j0$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __j0$MH = RuntimeHelper.downcallHandle(
        "__j0",
        constants$30.__j0$FUNC
    );
}


