// Generated by jextract

package id.jrealsense.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct rs2_dsm_params {
 *     unsigned long long timestamp;
 *     unsigned short version;
 *     unsigned char model;
 *     unsigned char flags[5];
 *     float h_scale;
 *     float v_scale;
 *     float h_offset;
 *     float v_offset;
 *     float rtd_offset;
 *     unsigned char temp_x2;
 *     float mc_h_scale;
 *     float mc_v_scale;
 *     unsigned char weeks_since_calibration;
 *     unsigned char ac_weeks_since_calibaration;
 *     unsigned char reserved[1];
 * };
 * }
 */
public class rs2_dsm_params {

    public static MemoryLayout $LAYOUT() {
        return constants$88.const$4;
    }
    public static VarHandle timestamp$VH() {
        return constants$88.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long long timestamp;
     * }
     */
    public static long timestamp$get(MemorySegment seg) {
        return (long)constants$88.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long long timestamp;
     * }
     */
    public static void timestamp$set(MemorySegment seg, long x) {
        constants$88.const$5.set(seg, x);
    }
    public static long timestamp$get(MemorySegment seg, long index) {
        return (long)constants$88.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void timestamp$set(MemorySegment seg, long index, long x) {
        constants$88.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle version$VH() {
        return constants$89.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned short version;
     * }
     */
    public static short version$get(MemorySegment seg) {
        return (short)constants$89.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned short version;
     * }
     */
    public static void version$set(MemorySegment seg, short x) {
        constants$89.const$0.set(seg, x);
    }
    public static short version$get(MemorySegment seg, long index) {
        return (short)constants$89.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void version$set(MemorySegment seg, long index, short x) {
        constants$89.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle model$VH() {
        return constants$89.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char model;
     * }
     */
    public static byte model$get(MemorySegment seg) {
        return (byte)constants$89.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char model;
     * }
     */
    public static void model$set(MemorySegment seg, byte x) {
        constants$89.const$1.set(seg, x);
    }
    public static byte model$get(MemorySegment seg, long index) {
        return (byte)constants$89.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void model$set(MemorySegment seg, long index, byte x) {
        constants$89.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment flags$slice(MemorySegment seg) {
        return seg.asSlice(11, 5);
    }
    public static VarHandle h_scale$VH() {
        return constants$89.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float h_scale;
     * }
     */
    public static float h_scale$get(MemorySegment seg) {
        return (float)constants$89.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float h_scale;
     * }
     */
    public static void h_scale$set(MemorySegment seg, float x) {
        constants$89.const$2.set(seg, x);
    }
    public static float h_scale$get(MemorySegment seg, long index) {
        return (float)constants$89.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void h_scale$set(MemorySegment seg, long index, float x) {
        constants$89.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle v_scale$VH() {
        return constants$89.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float v_scale;
     * }
     */
    public static float v_scale$get(MemorySegment seg) {
        return (float)constants$89.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float v_scale;
     * }
     */
    public static void v_scale$set(MemorySegment seg, float x) {
        constants$89.const$3.set(seg, x);
    }
    public static float v_scale$get(MemorySegment seg, long index) {
        return (float)constants$89.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void v_scale$set(MemorySegment seg, long index, float x) {
        constants$89.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle h_offset$VH() {
        return constants$89.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float h_offset;
     * }
     */
    public static float h_offset$get(MemorySegment seg) {
        return (float)constants$89.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float h_offset;
     * }
     */
    public static void h_offset$set(MemorySegment seg, float x) {
        constants$89.const$4.set(seg, x);
    }
    public static float h_offset$get(MemorySegment seg, long index) {
        return (float)constants$89.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void h_offset$set(MemorySegment seg, long index, float x) {
        constants$89.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle v_offset$VH() {
        return constants$89.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float v_offset;
     * }
     */
    public static float v_offset$get(MemorySegment seg) {
        return (float)constants$89.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float v_offset;
     * }
     */
    public static void v_offset$set(MemorySegment seg, float x) {
        constants$89.const$5.set(seg, x);
    }
    public static float v_offset$get(MemorySegment seg, long index) {
        return (float)constants$89.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void v_offset$set(MemorySegment seg, long index, float x) {
        constants$89.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rtd_offset$VH() {
        return constants$90.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float rtd_offset;
     * }
     */
    public static float rtd_offset$get(MemorySegment seg) {
        return (float)constants$90.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float rtd_offset;
     * }
     */
    public static void rtd_offset$set(MemorySegment seg, float x) {
        constants$90.const$0.set(seg, x);
    }
    public static float rtd_offset$get(MemorySegment seg, long index) {
        return (float)constants$90.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void rtd_offset$set(MemorySegment seg, long index, float x) {
        constants$90.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle temp_x2$VH() {
        return constants$90.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char temp_x2;
     * }
     */
    public static byte temp_x2$get(MemorySegment seg) {
        return (byte)constants$90.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char temp_x2;
     * }
     */
    public static void temp_x2$set(MemorySegment seg, byte x) {
        constants$90.const$1.set(seg, x);
    }
    public static byte temp_x2$get(MemorySegment seg, long index) {
        return (byte)constants$90.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void temp_x2$set(MemorySegment seg, long index, byte x) {
        constants$90.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mc_h_scale$VH() {
        return constants$90.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float mc_h_scale;
     * }
     */
    public static float mc_h_scale$get(MemorySegment seg) {
        return (float)constants$90.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float mc_h_scale;
     * }
     */
    public static void mc_h_scale$set(MemorySegment seg, float x) {
        constants$90.const$2.set(seg, x);
    }
    public static float mc_h_scale$get(MemorySegment seg, long index) {
        return (float)constants$90.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mc_h_scale$set(MemorySegment seg, long index, float x) {
        constants$90.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mc_v_scale$VH() {
        return constants$90.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float mc_v_scale;
     * }
     */
    public static float mc_v_scale$get(MemorySegment seg) {
        return (float)constants$90.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float mc_v_scale;
     * }
     */
    public static void mc_v_scale$set(MemorySegment seg, float x) {
        constants$90.const$3.set(seg, x);
    }
    public static float mc_v_scale$get(MemorySegment seg, long index) {
        return (float)constants$90.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void mc_v_scale$set(MemorySegment seg, long index, float x) {
        constants$90.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle weeks_since_calibration$VH() {
        return constants$90.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char weeks_since_calibration;
     * }
     */
    public static byte weeks_since_calibration$get(MemorySegment seg) {
        return (byte)constants$90.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char weeks_since_calibration;
     * }
     */
    public static void weeks_since_calibration$set(MemorySegment seg, byte x) {
        constants$90.const$4.set(seg, x);
    }
    public static byte weeks_since_calibration$get(MemorySegment seg, long index) {
        return (byte)constants$90.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void weeks_since_calibration$set(MemorySegment seg, long index, byte x) {
        constants$90.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ac_weeks_since_calibaration$VH() {
        return constants$90.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char ac_weeks_since_calibaration;
     * }
     */
    public static byte ac_weeks_since_calibaration$get(MemorySegment seg) {
        return (byte)constants$90.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char ac_weeks_since_calibaration;
     * }
     */
    public static void ac_weeks_since_calibaration$set(MemorySegment seg, byte x) {
        constants$90.const$5.set(seg, x);
    }
    public static byte ac_weeks_since_calibaration$get(MemorySegment seg, long index) {
        return (byte)constants$90.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_weeks_since_calibaration$set(MemorySegment seg, long index, byte x) {
        constants$90.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment reserved$slice(MemorySegment seg) {
        return seg.asSlice(47, 1);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


