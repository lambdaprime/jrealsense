// Generated by jextract

package id.jrealsense.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$22 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$22() {}
    static final FunctionDescriptor __asinh$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __asinh$MH = RuntimeHelper.downcallHandle(
        "__asinh",
        constants$22.__asinh$FUNC
    );
    static final FunctionDescriptor atanh$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle atanh$MH = RuntimeHelper.downcallHandle(
        "atanh",
        constants$22.atanh$FUNC
    );
    static final FunctionDescriptor __atanh$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __atanh$MH = RuntimeHelper.downcallHandle(
        "__atanh",
        constants$22.__atanh$FUNC
    );
    static final FunctionDescriptor exp$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle exp$MH = RuntimeHelper.downcallHandle(
        "exp",
        constants$22.exp$FUNC
    );
    static final FunctionDescriptor __exp$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __exp$MH = RuntimeHelper.downcallHandle(
        "__exp",
        constants$22.__exp$FUNC
    );
    static final FunctionDescriptor frexp$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle frexp$MH = RuntimeHelper.downcallHandle(
        "frexp",
        constants$22.frexp$FUNC
    );
}


