// Generated by jextract

package id.jrealsense.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct rs2_pose {
 *     rs2_vector translation;
 *     rs2_vector velocity;
 *     rs2_vector acceleration;
 *     rs2_quaternion rotation;
 *     rs2_vector angular_velocity;
 *     rs2_vector angular_acceleration;
 *     unsigned int tracker_confidence;
 *     unsigned int mapper_confidence;
 * };
 * }
 */
public class rs2_pose {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y"),
            Constants$root.C_FLOAT$LAYOUT.withName("z")
        ).withName("translation"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y"),
            Constants$root.C_FLOAT$LAYOUT.withName("z")
        ).withName("velocity"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y"),
            Constants$root.C_FLOAT$LAYOUT.withName("z")
        ).withName("acceleration"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y"),
            Constants$root.C_FLOAT$LAYOUT.withName("z"),
            Constants$root.C_FLOAT$LAYOUT.withName("w")
        ).withName("rotation"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y"),
            Constants$root.C_FLOAT$LAYOUT.withName("z")
        ).withName("angular_velocity"),
        MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("x"),
            Constants$root.C_FLOAT$LAYOUT.withName("y"),
            Constants$root.C_FLOAT$LAYOUT.withName("z")
        ).withName("angular_acceleration"),
        Constants$root.C_INT$LAYOUT.withName("tracker_confidence"),
        Constants$root.C_INT$LAYOUT.withName("mapper_confidence")
    ).withName("rs2_pose");
    public static MemoryLayout $LAYOUT() {
        return rs2_pose.$struct$LAYOUT;
    }
    public static MemorySegment translation$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment velocity$slice(MemorySegment seg) {
        return seg.asSlice(12, 12);
    }
    public static MemorySegment acceleration$slice(MemorySegment seg) {
        return seg.asSlice(24, 12);
    }
    public static MemorySegment rotation$slice(MemorySegment seg) {
        return seg.asSlice(36, 16);
    }
    public static MemorySegment angular_velocity$slice(MemorySegment seg) {
        return seg.asSlice(52, 12);
    }
    public static MemorySegment angular_acceleration$slice(MemorySegment seg) {
        return seg.asSlice(64, 12);
    }
    static final VarHandle tracker_confidence$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tracker_confidence"));
    public static VarHandle tracker_confidence$VH() {
        return rs2_pose.tracker_confidence$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tracker_confidence;
     * }
     */
    public static int tracker_confidence$get(MemorySegment seg) {
        return (int)rs2_pose.tracker_confidence$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tracker_confidence;
     * }
     */
    public static void tracker_confidence$set(MemorySegment seg, int x) {
        rs2_pose.tracker_confidence$VH.set(seg, x);
    }
    public static int tracker_confidence$get(MemorySegment seg, long index) {
        return (int)rs2_pose.tracker_confidence$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tracker_confidence$set(MemorySegment seg, long index, int x) {
        rs2_pose.tracker_confidence$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mapper_confidence$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mapper_confidence"));
    public static VarHandle mapper_confidence$VH() {
        return rs2_pose.mapper_confidence$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int mapper_confidence;
     * }
     */
    public static int mapper_confidence$get(MemorySegment seg) {
        return (int)rs2_pose.mapper_confidence$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int mapper_confidence;
     * }
     */
    public static void mapper_confidence$set(MemorySegment seg, int x) {
        rs2_pose.mapper_confidence$VH.set(seg, x);
    }
    public static int mapper_confidence$get(MemorySegment seg, long index) {
        return (int)rs2_pose.mapper_confidence$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mapper_confidence$set(MemorySegment seg, long index, int x) {
        rs2_pose.mapper_confidence$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


