// Generated by jextract

package id.jrealsense.jextract;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct rs2_pose {
 *     rs2_vector translation;
 *     rs2_vector velocity;
 *     rs2_vector acceleration;
 *     rs2_quaternion rotation;
 *     rs2_vector angular_velocity;
 *     rs2_vector angular_acceleration;
 *     unsigned int tracker_confidence;
 *     unsigned int mapper_confidence;
 * };
 * }
 */
public class rs2_pose {

    public static MemoryLayout $LAYOUT() {
        return constants$93.const$0;
    }
    public static MemorySegment translation$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment velocity$slice(MemorySegment seg) {
        return seg.asSlice(12, 12);
    }
    public static MemorySegment acceleration$slice(MemorySegment seg) {
        return seg.asSlice(24, 12);
    }
    public static MemorySegment rotation$slice(MemorySegment seg) {
        return seg.asSlice(36, 16);
    }
    public static MemorySegment angular_velocity$slice(MemorySegment seg) {
        return seg.asSlice(52, 12);
    }
    public static MemorySegment angular_acceleration$slice(MemorySegment seg) {
        return seg.asSlice(64, 12);
    }
    public static VarHandle tracker_confidence$VH() {
        return constants$93.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int tracker_confidence;
     * }
     */
    public static int tracker_confidence$get(MemorySegment seg) {
        return (int)constants$93.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int tracker_confidence;
     * }
     */
    public static void tracker_confidence$set(MemorySegment seg, int x) {
        constants$93.const$1.set(seg, x);
    }
    public static int tracker_confidence$get(MemorySegment seg, long index) {
        return (int)constants$93.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void tracker_confidence$set(MemorySegment seg, long index, int x) {
        constants$93.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle mapper_confidence$VH() {
        return constants$93.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int mapper_confidence;
     * }
     */
    public static int mapper_confidence$get(MemorySegment seg) {
        return (int)constants$93.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int mapper_confidence;
     * }
     */
    public static void mapper_confidence$set(MemorySegment seg, int x) {
        constants$93.const$2.set(seg, x);
    }
    public static int mapper_confidence$get(MemorySegment seg, long index) {
        return (int)constants$93.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mapper_confidence$set(MemorySegment seg, long index, int x) {
        constants$93.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena arena) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, arena); }
}


